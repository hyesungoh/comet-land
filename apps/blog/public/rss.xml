<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[JeongLog]]></title>
        <link>https://dgd03146-github-io.vercel.app/</link>
        <description>
          <![CDATA[I like to share my knowledge.]]>
        </description>
        <language>en</language>
        <lastBuildDate>2022-09-21</lastBuildDate>
        <item>
    <title><![CDATA[[TIL] 20220921]]></title>
    <link>https://dgd03146-github-io.vercel.app//220921</link>
    <pubDate>2022-09-21</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220921</guid>
    <description>
    <![CDATA[프론트엔드 면접대비 50문 50답, React Query Prefetching 적용]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로젝트 최적화
<ul>
<li>react query prefetching 오류 해결
<ul>
<li>stale time 설정으로 캐시에 저장된 데이터를 사용가능하게 한다.</li>
</ul>
</li>
</ul>
</li>
<li>면접대비 50문 50답
<ul>
<li>면접을 대비하기 위해 프론트 면접질문 50문 50답에 대해 토론을 하였는데 내가 어렴풋이 알고 있던 개념을 정리할 수 있었고 개념들을 이해할 수 있도록 노력해야겠다고 생각했다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 최적화</p>
</li>
<li>
<p>타입스크립트</p>
</li>
<li>
<p>LeetCode 2문제</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220920]]></title>
    <link>https://dgd03146-github-io.vercel.app//220920</link>
    <pubDate>2022-09-20</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220920</guid>
    <description>
    <![CDATA[프로젝트 최적화, 이력서]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로젝트 최적화
<ul>
<li>react query prefetching으로 렌더링 속도 줄이기</li>
<li>이미지 레이지 로딩</li>
</ul>
</li>
<li>자료구조 알고리즘
<ul>
<li>Big O 표기법</li>
</ul>
</li>
<li>드림코딩 타입스크립트
<ul>
<li>기본 타입</li>
</ul>
</li>
<li>이력서 수정하기</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>실전 프로젝트 최적화</li>
<li>타입스크립트</li>
<li>LeetCode 2문제
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Longest Common Prefix]]></title>
    <link>https://dgd03146-github-io.vercel.app//220907-Longest-Common-Prefix</link>
    <pubDate>2022-09-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220907-Longest-Common-Prefix</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>""</code>.</p>
<p><strong>Example 1:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: strs = ["flower","flow","flight"]
</span><span class="code-line">Output: "fl"
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: strs = ["dog","racecar","car"]
</span><span class="code-line">Output: ""
</span><span class="code-line">Explanation: There is no common prefix among the input strings.
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &#x3C;= strs.length &#x3C;= 200</code></li>
<li><code>0 &#x3C;= strs[i].length &#x3C;= 200</code></li>
<li><code>strs[i]</code> consists of only lowercase English letters.</li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">longestCommonPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword">const</span> first <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> first<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> check <span class="token operator">=</span> first<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> strs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>check <span class="token operator">!==</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    answer <span class="token operator">+=</span> check<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Runtime: <strong>81 ms</strong></p>
<p>Memory Usage: <strong>42.4 MB</strong></p>
<p>공통된 문자열을 찾아내는 문제이다. 첫 문자를 기준으로 한 글자씩 다음 요소와 글자와 비교해 겹치는 것만 찾아낸다.</p>
<br/>
<h2 id="others-solution" class="heading">Other’s Solution</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">longestCommonPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> key <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> goodChars <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> word<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        goodChars <span class="token operator">+=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    key <span class="token operator">=</span> goodChars<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> key<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Runtime: 60 <strong>ms</strong></p>
<p>원리는 같으나 prefix가 같지 않을때 break를 걸어서 불필요하게 for문을 반복하는 코드를 줄여서 runtime을 줄였기 때문에 확실히 간단해진 것 같다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Reverse String]]></title>
    <link>https://dgd03146-github-io.vercel.app//220907-Reverse-String</link>
    <pubDate>2022-09-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220907-Reverse-String</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p>
<p>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener noreferer">in-place</a> with <code>O(1)</code> extra memory.</p>
<p><strong>Example 1:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: s = ["h","e","l","l","o"]
</span><span class="code-line">Output: ["o","l","l","e","h"]
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: s = ["H","a","n","n","a","h"]
</span><span class="code-line">Output: ["h","a","n","n","a","H"]
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &#x3C;= s.length &#x3C;= 105</code></li>
<li><code>s[i]</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank" rel="noopener noreferer">printable ascii character</a>.</li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> q <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p <span class="token operator">&#x3C;=</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    s<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
</span><span class="code-line">    p<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">    q<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Runtime: <strong>121 ms</strong></p>
<p>Memory Usage: <strong>49.2 MB</strong></p>
<p>배열을 역순으로 출력하는 문제였다. <code>reverse</code> 메소드를 사용해서 간단하게 풀 수 있었으나 투포인터 알고리즘을 사용하여 풀었다.</p>
<p>배열의 첫번째와 마지막 두개의 포인터로 첫번째 포인터는 더하고 마지막 포인터는 빼면서 두 포인터가 같거나 작을때까지 바꿔준다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[DevOps] CI / CD]]></title>
    <link>https://dgd03146-github-io.vercel.app//220907-CI-CD</link>
    <pubDate>2022-09-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220907-CI-CD</guid>
    <description>
    <![CDATA[현업에서 쓰는 개발 프로세스]]>
    </description>
    <content:encoded>
      <![CDATA[<h1 id="cicd" class="heading"><strong>CI/CD</strong></h1>
<h2 id="소개" class="heading">소개</h2>
<p>어떻게 하면 시장과 고객의 요구에 빠르게 반응해서 제품을 출시, 업데이트 할 것인가.</p>
<p>세계적으로 많은 기업들이 CI / CD 프로세스를 사용한다.</p>
<br/>
<h2 id="ci--cd란" class="heading">CI / CD란?</h2>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/745884ca-a82b-4e6e-9339-17be981c3c4f/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022005Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=27076f1ac24c0b3b18e97953b5ef737afcbc17a18c9bbf5cdc791e2589050aae&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>어플리케이션 개발 단계부터 배포 때까지 모든 단계들을 자동화를 통해서 조금 더 효율적이고 빠르게 사용자에게 빈번이 배포할 수 있도록 만드는 것을 말한다.</p>
<br/>
<h2 id="ci" class="heading">CI</h2>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f57bc008-1c09-4d2a-a143-8b3ac900a5f3/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022041Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=1fe1d07cf91b879a3bb149f2527252948690dc1bb9919f6f26943c280db6087b&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>Continuous Intergration 지속적인 통합</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/cccca7ae-5a04-439a-b568-c6744b796ac4/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022103Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=7034d8648076b644511d7b85b73430d2f5c6893aa41529aadf2690d4ef12f1e4&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>CI(지속적인 통합)는 수정이나 새로 만드는 기능들이 메인 레포지토리에 주기적으로 빌드 되고 테스트가 되어서 머지 되는 것을 말한다.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/b45248c8-686c-499e-bb5f-c2fb22d44c56/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022119Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=ee3d98884aa1d5e31f5d2c4e283795a342dd53911c923de2ac068c5db3672fa4&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>버그를 수정하거나 새로운 기능을 구현할 때는 이 기능을 어떻게 작은 단위로 나눠서 내가 메인 레포지토리에 반영하거나 또는 작은 단위로 나눠서 내가 사용자에게 배포할 수 있을지 최대한 작은 단위로 나누어서 개발하고 통합해 나가는 것이 중요하다.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/768f8890-8c10-47d2-a1f6-a98662acd36c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022136Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=31c5b0b19d30a61f5448c3d3ec9b16a06c7a376f86d7ae6f355eccad5920c49e&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>주기적으로 머지 된 이 코드의 변경 사항이 자동으로 빌드가 되어서 코드 변경 사항이 후에도 빌드가 성공적으로 되는지 확인이 되어야 되고 그리고 새로 추가된 이 코드의 변경사항 뿐만 아니라 기존의</p>
<p>시스템의 다른 버그를 초래 하지는 않았는지 자동으로 테스트까지 되어야 한다.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/ad54aa13-0ab6-43b7-95a7-fcf2c53bb33e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022150Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=5ca7e4bbbcb5ff323135a49f472d6234279d6799082d07e090f6f971ebe057f5&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<br/>
<h3 id="ci-장점들">CI 장점들</h3>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c2f1b3eb-9fba-425e-ac55-3a146405936e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022204Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=c25ec2bf769213941243bc4a15aec88e42d03288c8682c30ec7ad4598024daa5&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<ol>
<li>주기적으로 머지를 하기 때문에 머지 충돌을 피할 수 있어서 개발의 생산성을 더 높일 수 있다.</li>
<li>머지 되는 모든 코드들은 자동으로 빌드 되고 테스트 되기 때문에 코드의 결함이나 문제점이 빠르게 발견될 수 있다</li>
<li>발생되는 결함을(버그) 빠르게 수정이 가능하다. 왜냐면 주기적으로 머지 를 하기 위해서 코드의 변경 사항이 작기 때문에 문제를 수정할 때도 조금 더 고립된 작은 단위의 문제를 확인할 수 있기 때문이다.</li>
<li><strong>가장 큰 장점으로</strong> 조금 더 나은 코드의 퀄리티를 가질 수 있다. 왜냐하면 이렇게 ci 를 잘 운영하기 위해서는 모든 개발자들이 자신이 새로 작성하는 코즈에 한에서는 유닛테스트 를 꼭 포함하기 때문이다. 그래서 ci 를 사용한다면 우리 프로젝트의 대부분의 소스 코드 들이 자동으로 테스트가 될 수 있도록 만들기 때문에 조금 더 안정성 있는 제품을 개발해 나갈 수 있다</li>
</ol>
<br/>
<h2 id="cd" class="heading">CD</h2>
<h3 id="continous-delivery">Continous Delivery</h3>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/5de5eff4-d9bd-486d-81a5-05b492dcd209/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022219Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=46c769303257a2d6faec458f044536431a6bb51be3e88ff5b379a47b41538ab4&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>Continous Delivery 지속적인 제공</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7b8a57cc-3b8b-4892-88ca-ed9ec2580bfe/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022230Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=d04660bfa30f7f2da94829aebf6977993c939ac78e061d1bc12b0911786ba9cd&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>CI 를 통해서 주기적으로 머지 된 코드의 변경사항들이 자동으로 빌드가 되고 테스트가 되었다면 이제 배포 하는 단계에서 배포 할 즉 릴리즈 할 준비 과정을 거친다. 그리고 준비된 릴리즈가 괜찮은지 정상적인 지 아무런 문제가 없는 지 직접 개발자나 또는 검증 팀이 검증을 한 다음에 아 이제 최종적으로 사용자에게 배포 해도 되겠다 라고 결정이 되면 수동적으로 배포하는 요 단계를 Continous Delivery라고 한다.</p>
<h3 id="continous-deployment">Continous Deployment</h3>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/58ce651d-fd32-461d-8872-be20a565251a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022244Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=7fd0ebfba9f812a01302d2caf948f2880bdce9480796ca3d4dcdf4c12822e097&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>Continous Deployment 지속적인 배포로 사용하는 경우도 있다.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c8960c74-eb93-4160-ba47-71a41199882c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022259Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=76de7a0fc768a2cc4f7937aa2b22ce21d864d9b6a29786afa57b718834e0f5a5&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>릴리즈가 준비가 되자마자 자동으로 후 사용자에게 배포할 수 있도록 만들 수도 있다. 이렇게 모든 과정을 자동화 해놓는 것을 Continuous Deployment라고 부른다.</p>
<p>딜리버리 와 살짝 비슷하지만 최종 단계가 자동화가 되었는지 되지 않았는지 에 따라서 살짝씩 달라질 수 있다.</p>
<p>회사마다 어느 정도의 얼마만큼의 자동화를 하냐가 달라지기 때문에 CI CD라고 해서 모든 회사가 똑같은 프로세스를 거치는 것은 아니고 회사마다 팀마다 다른 방식으로 적용해서 사용할 수 있다.</p>
<br/>
<h2 id="ci--cd-파이프라인" class="heading">CI / CD 파이프라인</h2>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c59bfc75-3a3d-498d-a689-17831e94e162/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022316Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=61fb86446a884917156071239e739628355dde59a26bd5783a5bb33d61752352&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<p>개발자가 작은 단위로 기능을 나누어서 주기적으로 메인 레포지토리에 머지를 하면 자동으로 빌드를 하고 테스트 과정을 거쳐서 릴리즈 준비를 한다. 여기서 수동적으로 또는 자동으로 최종 배포를 거치게 된다.</p>
<br/>
<h2 id="ci--cd-툴" class="heading">CI / CD 툴</h2>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2bc170ef-3ac6-4ace-9bf5-665c542b5d14/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220907%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220907T022331Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=511461b68d8be3e8db539e4979ddf026413c5bdec1ff225fa5c585319d19486f&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled"></p>
<br/>
<blockquote>
<p>References
<a href="https://www.youtube.com/watch?v=0Emq5FypiMM" target="_blank" rel="noopener noreferer">https://www.youtube.com/watch?v=0Emq5FypiMM</a></p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220903]]></title>
    <link>https://dgd03146-github-io.vercel.app//220903</link>
    <pubDate>2022-09-03</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220903</guid>
    <description>
    <![CDATA[Stomp js, TypeScript 기본 타입]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>TypeScript 기본 타입</p>
<ul>
<li>
<p>TypeScript vs JavaScript</p>
<ul>
<li>자바스크립트는 동적 타입이다. 이는 즉, 나중에 문자열을 할당할 때 처음에 숫자형을 잡아둘 수 있는 변수가 있더라도 전혀 문제 없다는 것을 의미한다.</li>
<li>반면 타입스크립트는 정적 타입으로, 이는 즉 개발 도중에 끝나는 변수와 매개변수의 타입을 정의한다는 것을 의미한다.</li>
</ul>
</li>
<li>
<p>숫자, 문자, 불린 타입</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">n2</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">showResult</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">phrase</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// if (typeof n1 !== 'number' || typeof n2 !== 'number') {</span>
</span><span class="code-line">  <span class="token comment">//   throw new Error('Incorrect input!');</span>
</span><span class="code-line">  <span class="token comment">// }</span>
</span><span class="code-line">  <span class="token keyword">const</span> result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>showResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>phrase <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> number2 <span class="token operator">=</span> <span class="token number">2.8</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> printResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> resultPhrase <span class="token operator">=</span> <span class="token string">'Result is: '</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">add</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">,</span> printResult<span class="token punctuation">,</span> resultPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>Stomp js에 대한 공부</p>
<ul>
<li>stomp는 단순 (또는 스트리밍) 텍스트 지향 메시징 프로토콜이다. spring에 종속적이며, 구독방식으로 사용하고 있습니다. 가벼워서 보통 많이들 사용한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>실시간 채팅 기능 구현
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220902]]></title>
    <link>https://dgd03146-github-io.vercel.app//220902</link>
    <pubDate>2022-09-02</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220902</guid>
    <description>
    <![CDATA[Stomp js, TypeScript 기본 타입]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>TypeScript 기본 타입</p>
<ul>
<li>
<p>TypeScript vs JavaScript</p>
<ul>
<li>자바스크립트는 동적 타입이다. 이는 즉, 나중에 문자열을 할당할 때 처음에 숫자형을 잡아둘 수 있는 변수가 있더라도 전혀 문제 없다는 것을 의미한다.</li>
<li>반면 타입스크립트는 정적 타입으로, 이는 즉 개발 도중에 끝나는 변수와 매개변수의 타입을 정의한다는 것을 의미한다.</li>
</ul>
</li>
<li>
<p>숫자, 문자, 불린 타입</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">n2</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">showResult</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">phrase</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// if (typeof n1 !== 'number' || typeof n2 !== 'number') {</span>
</span><span class="code-line">  <span class="token comment">//   throw new Error('Incorrect input!');</span>
</span><span class="code-line">  <span class="token comment">// }</span>
</span><span class="code-line">  <span class="token keyword">const</span> result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>showResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>phrase <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> number2 <span class="token operator">=</span> <span class="token number">2.8</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> printResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> resultPhrase <span class="token operator">=</span> <span class="token string">'Result is: '</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">add</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">,</span> printResult<span class="token punctuation">,</span> resultPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>Stomp js에 대한 공부</p>
<ul>
<li>stomp는 단순 (또는 스트리밍) 텍스트 지향 메시징 프로토콜이다. spring에 종속적이며, 구독방식으로 사용하고 있습니다. 가벼워서 보통 많이들 사용한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>실시간 채팅 기능 구현
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220901]]></title>
    <link>https://dgd03146-github-io.vercel.app//220901</link>
    <pubDate>2022-09-01</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220901</guid>
    <description>
    <![CDATA[Stomp js, TypeScript 기본 타입]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'웹소켓 연결'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// client객체를 만들기</span>
</span><span class="code-line">  clientRef<span class="token punctuation">.</span><span class="token property-access">current</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token literal-property property">brokerURL</span><span class="token operator">:</span> <span class="token string">'ws://43.200.6.110/socket'</span><span class="token punctuation">,</span> <span class="token comment">// 웹소켓 서버로 직접 접속</span>
</span><span class="code-line">    <span class="token function-variable function">webSocketFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'http://43.200.6.110/socket'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// proxy를 통한 접속</span>
</span><span class="code-line">    <span class="token literal-property property">connectHeaders</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">      headers<span class="token punctuation">,</span> <span class="token comment">// 토큰 전달</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token function-variable function">debug</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token literal-property property">reconnectDelay</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment">//자동 재 연결</span>
</span><span class="code-line">    <span class="token literal-property property">heartbeatIncoming</span><span class="token operator">:</span> <span class="token number">4000</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token literal-property property">heartbeatOutgoing</span><span class="token operator">:</span> <span class="token number">4000</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token function-variable function">onConnect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token comment">// 구독</span>
</span><span class="code-line">      <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token function-variable function">onStompError</span><span class="token operator">:</span> <span class="token parameter">frame</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token comment">// error message 출력</span>
</span><span class="code-line">      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 클라이언트 활성화</span>
</span><span class="code-line">  clientRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">.</span><span class="token method function property-access">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>실시간 채팅을 서버와 연결을 하여 구현을 하였다. 우리 프로젝트에서는 1대1 dm 기능을 구현하여야 하는데 대화하는 유저들은 같은 방안에 들어가야하는게 핵심이었다. 같은 방안에 들어가기 위해서 요청을 닉네임으로 하고 서버에서 닉네임을 기준으로 같은 방에 넣었다.</p>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>채팅방 목록 무한 스크롤
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220831]]></title>
    <link>https://dgd03146-github-io.vercel.app//220831</link>
    <pubDate>2022-08-31</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220831</guid>
    <description>
    <![CDATA[Stomp js, TypeScript 기본 타입]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>TypeScript 기본 타입</p>
<ul>
<li>
<p>TypeScript vs JavaScript</p>
<ul>
<li>자바스크립트는 동적 타입이다. 이는 즉, 나중에 문자열을 할당할 때 처음에 숫자형을 잡아둘 수 있는 변수가 있더라도 전혀 문제 없다는 것을 의미한다.</li>
<li>반면 타입스크립트는 정적 타입으로, 이는 즉 개발 도중에 끝나는 변수와 매개변수의 타입을 정의한다는 것을 의미한다.</li>
</ul>
</li>
<li>
<p>숫자, 문자, 불린 타입</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">n2</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">showResult</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">phrase</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// if (typeof n1 !== 'number' || typeof n2 !== 'number') {</span>
</span><span class="code-line">  <span class="token comment">//   throw new Error('Incorrect input!');</span>
</span><span class="code-line">  <span class="token comment">// }</span>
</span><span class="code-line">  <span class="token keyword">const</span> result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>showResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>phrase <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> number2 <span class="token operator">=</span> <span class="token number">2.8</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> printResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> resultPhrase <span class="token operator">=</span> <span class="token string">'Result is: '</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">add</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">,</span> printResult<span class="token punctuation">,</span> resultPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>Stomp js에 대한 공부</p>
<ul>
<li>stomp는 단순 (또는 스트리밍) 텍스트 지향 메시징 프로토콜이다. spring에 종속적이며, 구독방식으로 사용하고 있습니다. 가벼워서 보통 많이들 사용한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>실시간 채팅 기능 구현
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220830]]></title>
    <link>https://dgd03146-github-io.vercel.app//220830</link>
    <pubDate>2022-08-30</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220830</guid>
    <description>
    <![CDATA[채팅 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>실전 프로젝트 채팅 페이지 CSS 구현</li>
<li>실전 프로젝트 채팅 기능 Reference 공부</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>실전 프로젝트 채팅 기능 구현 완료
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220829]]></title>
    <link>https://dgd03146-github-io.vercel.app//220829</link>
    <pubDate>2022-08-29</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220829</guid>
    <description>
    <![CDATA[웹소켓 통신 공부, 실전 프로젝트 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React에서 Stomp JS를 이용한 웹소켓 통신 공부
<ul>
<li>이번 실전 프로젝트에서 websocket을 통한 1대1 실시간 채팅을 구현하게 되었다.</li>
<li>웹소켓은 <strong>Statefull protocol이다.</strong> 즉 요청을 매번 보내는게 아니라 connection을 유지해서 양방향 통신 또는 데이터 전송이 가능하도록 하는 기술이다.</li>
<li>stomp는 단순 (또는 스트리밍) 텍스트 지향 메시징 프로토콜이다. spring에 종속적이며, 구독방식으로 사용하고 있습니다. 가벼워서 보통 많이들 사용한다.</li>
</ul>
</li>
<li>실전 프로젝트 좋아요, 참여 기능 구현
<ul>
<li>state값에 따라 버튼의 색깔이 변경이 되고 Mutate를 통해서 데이터의 값이 바로 바로 바뀌는 걸 적용시켰다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>LeetCode 알고리즘 2문제</li>
<li>채팅 페이지 구현</li>
<li>JavaScript 알고리즘 Udemy
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220828]]></title>
    <link>https://dgd03146-github-io.vercel.app//220828</link>
    <pubDate>2022-08-28</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220828</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220827]]></title>
    <link>https://dgd03146-github-io.vercel.app//220827</link>
    <pubDate>2022-08-27</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220827</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220826]]></title>
    <link>https://dgd03146-github-io.vercel.app//220826</link>
    <pubDate>2022-08-26</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220826</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220825]]></title>
    <link>https://dgd03146-github-io.vercel.app//220825</link>
    <pubDate>2022-08-25</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220825</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220824]]></title>
    <link>https://dgd03146-github-io.vercel.app//220824</link>
    <pubDate>2022-08-24</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220824</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220823]]></title>
    <link>https://dgd03146-github-io.vercel.app//220823</link>
    <pubDate>2022-08-23</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220823</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220822]]></title>
    <link>https://dgd03146-github-io.vercel.app//220822</link>
    <pubDate>2022-08-22</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220822</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220821]]></title>
    <link>https://dgd03146-github-io.vercel.app//220821</link>
    <pubDate>2022-08-21</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220821</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220820]]></title>
    <link>https://dgd03146-github-io.vercel.app//220820</link>
    <pubDate>2022-08-20</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220820</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220819]]></title>
    <link>https://dgd03146-github-io.vercel.app//220819</link>
    <pubDate>2022-08-19</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220819</guid>
    <description>
    <![CDATA[React-Query Prefetching]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>React Query Prefetching</p>
<ul>
<li>prefetching 이란 사용자가 현재 페이지를 보고 있는 동안 다음 페이지를 미리 가져와서 사용자가 다음 페이지 버튼을 클릭할 때 기다릴 필요가 없도록 하는 기능이다.</li>
<li>데이터가 캐시에 미리 로드되고 캐시 시간이 다 되기 전에 사용자가 prefetching 페이지로 이동하는 한 캐시 된 데이터를 표시할 수 있기 때문에 사용자는 서버 호출을 할 때까지 기다릴 필요가 없게 된다.</li>
</ul>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">usePrefetchTreatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  queryClient<span class="token punctuation">.</span><span class="token method function property-access">prefetchQuery</span><span class="token punctuation">(</span>queryKeys<span class="token punctuation">.</span><span class="token property-access">treatments</span><span class="token punctuation">,</span> getTreatments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
  <br/>
</li>
</ul>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Add Binary]]></title>
    <link>https://dgd03146-github-io.vercel.app//220818-Add-Binary</link>
    <pubDate>2022-08-18</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220818-Add-Binary</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>
<p><strong>Example 1:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: a = "11", b = "1"
</span><span class="code-line">Output: "100"
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: a = "1010", b = "1011"
</span><span class="code-line">Output: "10101"
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &#x3C;= a.length, b.length &#x3C;= 104</code></li>
<li><code>a</code> and <code>b</code> consist only of <code>'0'</code> or <code>'1'</code> characters.</li>
<li>Each string does not contain leading zeros except for the zero itself.</li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">addBinary</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">let</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    sum <span class="token operator">=</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">^</span> <span class="token constant">B</span> <span class="token operator">^</span> carry<span class="token punctuation">)</span> <span class="token operator">+</span> sum<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">===</span> <span class="token constant">B</span> <span class="token operator">&#x26;&#x26;</span> <span class="token constant">A</span> <span class="token operator">!==</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      carry <span class="token operator">=</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span><span class="token operator">!</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    i<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line">    j<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    sum <span class="token operator">=</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token operator">+</span> sum<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> sum<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Runtime: <strong>104 ms</strong></p>
<p>Memory Usage: <strong>42.8 MB</strong></p>
<h3 id="문제-풀이">문제 풀이</h3>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb18b884-d8ae-4d93-92f6-05f7bdc058b2/Untitled.png" alt="Untitled"></p>
<p>문자열 맨 뒤에 값부터 비교해야하므로 각각 문자열의 마지막 문자부터 while문을 돌면서 하나씩 비교를 한다.</p>
<p>XOR을 했을때 같으면 0, 다르면 1이 되는데 sum은 XOR 값으로 구할수 있다. 뒤에서 부터 값을 구하는 것이기에 sum을 뒤에다가 붙여준다.</p>
<p>carry가 변하는 구간만 carry 값을 flip하는 조건을 추가한다.</p>
<p>carry가 1이면 carry를 sum에 추가한다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Pascal Triangle]]></title>
    <link>https://dgd03146-github-io.vercel.app//220818-Pascal-Triangle</link>
    <pubDate>2022-08-18</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220818-Pascal-Triangle</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal's triangle</strong>.</p>
<p>In <strong>Pascal's triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"></p>
<p><strong>Example 1:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: numRows = 5
</span><span class="code-line">Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: numRows = 1
</span><span class="code-line">Output: [[1]]
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &#x3C;= numRows &#x3C;= 30</code></li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">generate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numRows</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> array<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Runtime: <strong>82 ms</strong></p>
<p>Memory Usage: <strong>41.8 MB</strong></p>
<br/>
<h3 id="문제-풀이">문제 풀이</h3>
<p>Array 함수를 통해서 배열을 만든 후 각 배열 안에 원소들을 map을 통해서 배열로 바꾼다.</p>
<p>배열의 0번째 원소와 끝 원소는 1이기 때문에 나머지 원소들은 null로 채운다.</p>
<p>배열의 0번째 원소, 끝 원소를 1로 채운다.</p>
<p>이중 포문을 돌면서 array 배열의 이전의 두 원소의 합을 더한다.</p>
<br/>
<h3 id="다른-사람의-풀이">다른 사람의 풀이</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">generate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numRows</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    row<span class="token punctuation">[</span>row<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> row<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">let</span> rowAbove <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">      row<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rowAbove<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> rowAbove<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> array<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>원리는 똑같지만 한 for문 안에서 실행해서 코드가 더 갅단해졌고 불필요한 for문이 없어져서 런타임도 줄어들게 되었다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220818]]></title>
    <link>https://dgd03146-github-io.vercel.app//220818</link>
    <pubDate>2022-08-18</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220818</guid>
    <description>
    <![CDATA[LeetCode 2문제, React Query error 핸들링]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>LeetCode 2문제</p>
</li>
<li>
<p>React query error 처리</p>
<ul>
<li>모든 useQuery 호출에 오류 핸들링 방식을 적용해서 각 호출에 따로 지정하지 않도록 만든다. QueryClient를 위해 onError 핸들러 기본값을 만든다
<img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6a3d4632-0fd6-4ae3-9ebd-b4ebb6b79845/Untitled.png" alt="Untitled"></li>
</ul>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> createStandaloneToast <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'@chakra-ui/react'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">QueryClient</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'@tanstack/react-query'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'../theme'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> toast <span class="token operator">=</span> <span class="token function">createStandaloneToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">queryErrorHandler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// error is type unknown because in js, anything can be an error (e.g. throw(5))</span>
</span><span class="code-line">  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token string">'react-query-error'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> title <span class="token operator">=</span> error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> error<span class="token punctuation">.</span><span class="token property-access">message</span> <span class="token operator">:</span> <span class="token string">'error connecting to server'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// prevent duplicate toasts</span>
</span><span class="code-line">  toast<span class="token punctuation">.</span><span class="token method function property-access">closeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token string">'subtle'</span><span class="token punctuation">,</span> <span class="token literal-property property">isClosable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// to satisfy typescript until this file has uncommented contents</span>
</span><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">defaultOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token literal-property property">queries</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token literal-property property">onError</span><span class="token operator">:</span> queryErrorHandler<span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React query 섹션5</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220817]]></title>
    <link>https://dgd03146-github-io.vercel.app//220817</link>
    <pubDate>2022-08-17</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220817</guid>
    <description>
    <![CDATA[실전 프로젝트 기획 회의, React Query 커스텀 훅]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>디자인 기획 회의
<ul>
<li>디자이너님이 거의 대부분의 디자인을 만들어 오셔서 수정사항을 고치고 미 완료된 부분에 대해서 어떻게 하면 될지 회의를 하였다. 대부분의 디자인이 마무리가 되어서 이제 프론트 작업에 박차를 가할 수 있을것 같고 피그마에 값들이 다 들어있어서 CSS도 수월하게 할 수 있을것 같다.</li>
<li>모든 것을 다 정하였고 최종 디자인이 나오면 거기에 맞게 CSS를 맞추고 추가적 기능을 구현할 수 있도록 해야한다.</li>
</ul>
</li>
<li>React Query 커스텀 훅
<ul>
<li>더 큰 앱들에서는 각 데이터 유형에 커스텀 훅을 만드는 것이 매우 흔하다.</li>
<li>다수의 컴포넌트에서 데이터를 액세스해야 하는 경우 useQuery 호출을 재작성할 필요가 없다.</li>
<li>queryKey 일관성
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword">const</span> queryKeys <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">treatments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'treatments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">appointments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'appointments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">staff</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'staff'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">useTreatments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">Treatment</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// TODO: get data from server via useQuery</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>queryKeys<span class="token punctuation">.</span><span class="token property-access">treatments</span><span class="token punctuation">,</span> getTreatments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> data<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
쿼리 키의 일관성이야말로 캐시된 데이터를 캐시가 제공할 수 있도록 한다.
쿼리키는 react-query의 작업을 최대한 효율적이 되도록 하는 키이다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React Query 섹션 4 마무리</p>
</li>
<li>
<p>LeetCode 2문제</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220816]]></title>
    <link>https://dgd03146-github-io.vercel.app//220816</link>
    <pubDate>2022-08-16</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220816</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>모임 작성 페이지</li>
<li>React-query 무한스크롤 강의
<ul>
<li>사용자가 버튼을 클릭해서 새로운 데이터를 요청하거나 페이지의 특정 지점을 스크롤 했을 때 새 데이터를 가져오게 하는 것이다.
사용자가 데이터의 하단으로 오면 새로운 데이터를 가져와서 사용자가 중단 없이 계속 스크롤 할 수 있도록 한다.
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> fetchNextPage<span class="token punctuation">,</span> hasNextPage <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span><span class="token string">'sw-people'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">fetchUrl</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token parameter">lastPage</span> <span class="token arrow operator">=></span> lastPage<span class="token punctuation">.</span><span class="token property-access">next</span> <span class="token operator">||</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
<li>팀원 코드 리뷰
<ul>
<li>팀원의 코드를 보면서 코드가 비효율적이거나 어떻게 만들어야할지에 대한 제시를 해주었다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React query 인강 섹션4</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220815]]></title>
    <link>https://dgd03146-github-io.vercel.app//220815</link>
    <pubDate>2022-08-15</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220815</guid>
    <description>
    <![CDATA[실전 프로젝트 게시판, React Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>모임 게시판 페이지 만들기
<ul>
<li>게시판 목록 페이지</li>
<li>상세 페이지</li>
</ul>
</li>
<li>React Query Infinite scroll 개념 복습</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>모임 작성 페이지</p>
</li>
<li>
<p>React query 무한 스크롤 복습</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220814]]></title>
    <link>https://dgd03146-github-io.vercel.app//220814</link>
    <pubDate>2022-08-14</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220814</guid>
    <description>
    <![CDATA[React-Query 무한 스크롤]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query Infinite Scroll
<ul>
<li>사용자가 스크롤 할 때마다 새로운 데이터를 가져오는 것이. 당연히 모든 데이터를 한 번에 가져오는 것보다 훨씬 효율적이다. 엄청난 양의 데이터가 있는 사이트를 구축한다면 더더욱 그렇다.</li>
<li>useInfiniteQuery에서 객체는 두 개의 프로퍼티를 가지고 있다. 데이터 객체에는 두 개의 프로퍼티가 있다.
하나는 데이터 페이지 객체의 배열(Array)인 페이지이다. 페이지에 있는 각 요소가 하나의 useQuery에서 받는 데이터에 해당한다.
그리고 pageParams가 있다. 각 페이지의 매개변수가 기록되어 있고 모든 쿼리는 페이지 배열에 고유한 요소를 가지고 있고 그 요소는 해당 쿼리에 대한 데이터에 해당한다. 페이지기 진행되면서 쿼리도 바뀐다. pageParams은 검색된 쿼리의 키를 추적한다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 모임 게시판 페이지</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 8주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220814-wil</link>
    <pubDate>2022-08-14</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220814-wil</guid>
    <description>
    <![CDATA[실전 프로젝트 1주차]]>
    </description>
    <content:encoded>
      <![CDATA[<h1 id="실전-프로젝트" class="heading">실전 프로젝트</h1>
<p>드디어 실전 프로젝트 주차가 시작이 되었다. 지난 과정은 몸풀기였다면 이제부터는 본격적으로 시작하는 주이다. 6주동안 같은 팀원들과 함께 한 프로젝트를 계속해서 해나가는 기간이다. 짧다면 짧고 길다면 긴 기간동안 많은 것을 이루기를 희망하고 있다.</p>
<br/>
<h2 id="리더-지원" class="heading">리더 지원</h2>
<p>이번 실전 프로젝트 주차에는 특별한 점이 있었다. 그전에는 팀원이 모두 랜덤이었지만 이번에는 리더와 부리더를 지원해서 마음이 맡는 사람과 같이 지원할 수 있다. 물론 나머지 팀들은 랜덤이었다.</p>
<p>프론트 한명 백 한명씩 지원 가능하였는데 나는 학부시절부터 같이 한 친구와 함께 리더 부리더를 지원하였다. 나는 프론트를 공부하고 그 친구는 백엔드를 공부하여서 같은 조로 학부때 제대로 못한 프로젝트를 이번 항해 실전프로젝트 주차를 통해서 해보고 싶었다. 그리고 일단은 가장 편하고 의지할 수 있다는 점이 가장 컸다.</p>
<br/>
<h3 id="리더-지원-이유">리더 지원 이유</h3>
<p>내가 리더를 지원하게 된 이유는 일단 프로젝트를 적극적으로 의견을 반영하며 이끌어가고 싶었고 실력이 완벽하지는 않아도 리더로써 다른 팀원들과 의사 소통을 하는 과정에서 많은 것을 배우게 될 것 같았다. 그리고 무엇보다 수동적인 자세보다 적극적으로 참여하려면 리더만큼 좋은 기회가 없다고 생각했다. 이런 기회가 있으면 무조건 해보는 것이 좋은 경험이 될 것 같았다. 부 리더로 친구가 있으니 든든하기도 하고 프로젝트를 성공적으로 이끌어 갈 수 있을거라는 자신감도 있었기에 지원을 하게 되었다.</p>
<br/>
<h2 id="기획의-어려움" class="heading">기획의 어려움</h2>
<p>매번 주어진 과제를 프로젝트로 하다보니 기획이 이렇게 어렵고 시간이 많이 걸릴 줄은 몰랐다.</p>
<p>일단 팀원들의 의견이 각각 다르다보니 팀원들의 의견을 조율하는게 가장 어려웠다. 각자 하고 싶은 프로젝트가 달랐고 또 6주동안의 기간이 주어진 것은 처음이기에 적절한 스코프를 정하는 것도 쉽지가 않았다.</p>
<p>멘토님께서 기획을 일주일정도 시간을 써도 된다고 하셨는데 정말 그정도로 시간을 써서 기획을 해도 될 것 같았다. 기획을 세세하게 하면 할 수록 나중에 프로젝트를 진행할때 편하고 수정사항이 줄어들기에 개발 시간을 단축시킬 수 있는것 같아서 더더욱 신중하게 고민을 하고 결정을 하였다.</p>
<br/>
<h3 id="주제-후보">주제 후보</h3>
<p>팀원들의 아이디어를 정리해서 주제 후보를 추려보았는데 다양한 주제가 나왔다. 그 주제 중에서 장단점을 파악하여 주제를 정하게 되었다.</p>
<ul>
<li>주말농장 관리 플랫폼
<ul>
<li>농장운영자가 농장 등록, 이용자가 운영자와 농장 상태를 채팅으로 확인가능, cctv로 농장 관찰 가능, 지도로 주변에 등록된 주말농장 조회 및 신청</li>
</ul>
</li>
<li>바다 관련 성지
<ul>
<li>스노클링, 스쿠버다이빙, 서핑, 낚시 등 해양 레포츠를 즐기는 스팟을 공유하는 사이트.</li>
<li>지도위치공유, 쪽지or채팅, 관련상품 크롤링, 게시판,지도위치에 날씨API(파도높이,바람 등) 표기</li>
</ul>
</li>
<li>개발자키우기
<ul>
<li>개발 로드맵 제시</li>
</ul>
</li>
<li>책, 글귀 소개 서비스</li>
<li>레시피
<ul>
<li>쇼핑몰, 제품 연결</li>
</ul>
</li>
</ul>
<br/>
<h3 id="주제-정하기">주제 정하기</h3>
<p>여러가지 아이디어가 나왔는데 모두의 관심사가 다 다르기 때문에 아이디어가 나와도 주제를 정하는 것에 어려움을 겪었다. 그래서 각 주제에 대해 장단점, 구현 가능성을 토대로 분석을 해보았다.</p>
<p>개발자키우기 - 아이디어는 신선하고 괜찮으나 일단 디자인 적으로 애니메이션이 필요하였고 그게 가능한지 여부가 어려웠다. 그리고 게임적인 요소가 강하기에 팀원들의 거부감도 있었고 개발 스코프를 어떻게 정해야 할지 감이 안 잡히긴 했다. 구체적인 방안 없이 제시를 하여서 개발의 목적도 제대로 전달되지 않았던 것 같다.</p>
<p>주말농장 관리 플랫폼 - 처음에 이 주제로 정해질 뻔 하였으나 팀원들이 주말 농장에 대한 경험과 정보가 없어 흥미도가 떨어졌었던 것 같다. 그리고 직접 농장을 섭외하지 않으면 실제 서비스하는데에 있어 그냥 보여주기 식 밖에 안되기에 어려움을 겪게 될 것 같았다. CCTV를 보여주는 것도 아이디어는 좋으나 우리 수준에서 가능한 것인지 스코프 적인 측면에서도 우리의 범위를 벗어나게 될 것 같았다.</p>
<p>책, 글귀 소개 서비스, 레시피 - 기본 CRUD에다 아이디어가 신선하지 않았던 것 같다.</p>
<p>팀원들의 의견은 바다 관련 성지에 대한 아이디어로 좁혀지게 되었고 마침 스쿠버다이빙을 취미로 하시는 팀원이 있어서 저런 사이트가 있으면 자주 이용하게 될것 같다는 의견을 말씀해주셔서 팀원들 모두 서핑 및 낚시, 스쿠버 다이빙 같은 해양스포츠가 요새 떠오르기도 하고 비슷한 기능을 하는 사이트가 없다 보니 바다 관련 성지를 공유하는 커뮤니티로 의견이 좁혀졌다.</p>
<p>기본적인 CRUD 기능보다 해보지 않았던 새로운 기능을 시도해보고 싶었는데 커뮤니티에다 채팅과 알림 기능을 추가하여 소켓을 통해 실시간 통신을 해볼 수 있어서 스코프에도 적합하다고 생각하였고 물론 어려움은 있겠지만 Reference도 많아서 적절히 잘 구현할 수 있을것 같았다.</p>
<br/>
<h2 id="디자이너와의-협업" class="heading">디자이너와의 협업</h2>
<p>이번 실전 프로젝트는 현업에서 일하시는 디자이너님도 함께 참여하여 프로젝트를 진행하게 된다. 우리가 원하고자 하는 프로젝트를 정확하게 전달하는 것이 정말 중요했다. 와이어 프레임과 프로젝트 주제 선정 배경 등 원하고자 하는 기능, 디자인을 구체적으로 전달하기 위해서 팀원들끼리 의사소통도 많이 하고 여러가지 의견을 내놓으면서 가장 좋은 방안을 생각해냈다.</p>
<p>디자이너님과 함께하는 협업은 첨이지만 기대가 많이 되었다. 특히 프론트엔드 작업을 하는 나로써는 디자이너님과의 소통이 더욱 중요했다. 디자인하신 대로 프론트엔드에서는 화면에 보여줘야 하는데 디자이너님이 바라는 이상과 우리가 개발적으로 보여줄 수 있는 부분을 적절히 타협해야 했는데 디자이너님은 개발자의 관점을 모르고 우리는 디자인의 관점을 잘 모르기에 서로가 원하는 부분과 바라는 부분에서 많은 차이점이 있을거라고 생각했다.</p>
<p>디자이너님에게 프로젝트를 설명하였고 디자이너님께서 다음주 내로 만들어온다고 하였다. 원하는 바가 제대로 전달되었으면 좋겠다.</p>
<br/>
<h2 id="마치며" class="heading"><strong>마치며</strong></h2>
<p>클론코딩 주차에도 좋은 팀원을 만나 행복했는데 이번에도 다행히 좋은 팀원들과 함께여서 든든하였다. 리더로써 프로젝트를 6주동안 진행하게 되는데 프로젝트를 성공적으로 마치고 싶고 무엇보다 우리가 바라고 원했던 프로젝트를 만들었으면 좋겠다. 마지막 협업 실전 프로젝트도 열심히 항해 해보자!</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220813]]></title>
    <link>https://dgd03146-github-io.vercel.app//220813</link>
    <pubDate>2022-08-13</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220813</guid>
    <description>
    <![CDATA[React-Query Pagination & Prefetching]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>
<p>React Query Pagination</p>
<ul>
<li>
<p>페이지마다 다른 쿼리 키가 필요하다. 따라서 쿼리 키를 배열(Array)로 업데이트해서 가져오는 페이지 번호를 포함하도록 한다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentPage<span class="token punctuation">,</span> setCurrentPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1페이지부터</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'posts'</span><span class="token punctuation">,</span> currentPage<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">staleTime</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>React Query Prefetching</p>
<ul>
<li>데이터를 미리 가져와 캐시에 넣어서 사용자가 기다릴 필요 없도록 한다.</li>
<li>다시 말해 프리페칭(Prefetching)은 데이터를 캐시에 추가하며 구성할 수 있긴 하지만 기본값으로 만료(stale) 상태이다. 즉 데이터를 사용하고자 할 때 만료 상태에서 데이터를 다시 가져온다.</li>
</ul>
</li>
<li>
<p>React Query Mutation</p>
<ul>
<li>useMutation은 일부 예외를 제외하고 useQuery와 상당히 유사하다. mutate 함수를 반환하는데 이 mutate 함수는 우리가 변경 사항을 토대로 서버를 호출할 때 사용할 것이다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React query Infinite Scroll</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220812]]></title>
    <link>https://dgd03146-github-io.vercel.app//220812</link>
    <pubDate>2022-08-12</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220812</guid>
    <description>
    <![CDATA[React-Query stale time & cache time & query key]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query stale time vs cache time
<ul>
<li>staleTime은 리페칭할때 고려 사항이다.</li>
<li>캐시(cache)는 나중에 다시 필요할 수도 있는 데이터용이다.
특정 쿼리에 대한 활성 useQuery가 없는 경우 해당 데이터는 콜드 스토리지로 이동한다.
구성된 cacheTime이 지나면 캐시의 데이터가 만료되며 유효 시간의 기본값은 5분이다.
cacheTime이 관찰하는 시간의 양은 특정 쿼리에 대한 useQuery가 활성화된 후 경과한 시간이다.</li>
</ul>
</li>
<li>React Query 쿼리키
<img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e0068a86-83b6-43cf-8fbc-e586a6acd5df/Untitled.png" alt="Untitled">
쿼리 키를 쿼리에 대한 의존성 배열로 취급하게 된다. 따라서 쿼리 키가 변경되면 즉 post.id가 업데이트되면 React Query가 새 쿼리를 생성해서 staleTime과 cacheTime을 가지게 되고 의존성 배열이 다르다면 완전히 다른 것으로 간주된다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React Query Pagination</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220811]]></title>
    <link>https://dgd03146-github-io.vercel.app//220811</link>
    <pubDate>2022-08-11</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220811</guid>
    <description>
    <![CDATA[React-Query]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React Query 개념을 공부하였다.
<ul>
<li>React Query는 클라이언트에서 서버 데이터 캐시를 관리한다.</li>
<li>React 코드에 서버 데이터가 필요할 때 페치(Fetch)나 Axios를 사용해 서버로 바로 이동하지 않고 React Query 캐시를 요청한다.</li>
<li>React Query의 역할은 React Query 클라이언트를 어떻게 구성했느냐에 따라 해당 캐시의 데이터를 유지 관리하는 것이다.</li>
<li>데이터를 관리하는 것은 React Query이지만 서버의 새 데이터로 캐시를 업데이트하는 시기를 설정하는 것은 사용자의 몫이다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React Query stale time, cache time, 쿼리키 개념 공부</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220810]]></title>
    <link>https://dgd03146-github-io.vercel.app//220810</link>
    <pubDate>2022-08-10</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220810</guid>
    <description>
    <![CDATA[JWT refresh 토큰 개념, axios interceptor]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>JWT refresh 토큰 개념 공부
<ul>
<li>refresh 토큰의 원리를 이해하게 되었다. 리프레시 토큰은 액세스 토큰이 만료되었을 경우 이를 확인하고 다시 액세스 토큰을 발급하는 방법이다.</li>
<li>사용자는 재로그인을 하지 않고도, 본인이 인지하지 못하는 사이에 액세스 토큰을 재발급, 계속해서 로그인 상태를 유지하는 방법이다.</li>
</ul>
</li>
<li>axios interceptor 원리 이해
<ul>
<li>인터셉터는 <code>1.요청하기 직전, 2. 응답을 받고 then, catch로 처리 직전</code> 에 가로챌 수 있다.</li>
<li>매번 axios 요청할때마다, 겹치는 부분을 기본 URL로 설정한다.</li>
<li>axios 사용할때마다 헤더를 매번 넣고 싶지 않을때 사용한다.</li>
</ul>
</li>
<li>LeetCode Spiral Matrix 1문제, Digonal Traverse 복습</li>
<li>와이어프레임 회의</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React query 인강</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220809]]></title>
    <link>https://dgd03146-github-io.vercel.app//220809</link>
    <pubDate>2022-08-09</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220809</guid>
    <description>
    <![CDATA[실전 프로젝트 API 설계, 코테 문제 복습]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>실전 프로젝트 API 설계
<ul>
<li>API 설계를 하던 중 기획에서 조금 수정되는 부분도 있고 구현 가능성을 검토하면서 설계를 하여서 시간이 생각보다 더 걸리게 된 것 같다.</li>
</ul>
</li>
<li>LeetCode 문제 복습</li>
<li>프로그래머스 1문제</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 기능 테스트</p>
</li>
<li>
<p>LeetCode 2문제</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220808]]></title>
    <link>https://dgd03146-github-io.vercel.app//220808</link>
    <pubDate>2022-08-08</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220808</guid>
    <description>
    <![CDATA[클론코딩 프로젝트 React-Query 무한 스크롤, 실전 프로젝트 기획 회의]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>클론코딩 프로젝트 React-Query로 무한 스크롤 구현
<ul>
<li>코드 구현은 하였으나 테스트를 못하였다.</li>
</ul>
</li>
<li>실전 프로젝트 기획 회의
<ul>
<li>디자이너님과 다시 다 같이 회의를 하면서 기획을 확실히 정하였다. 처음 기획을 확실하게 해야 API 설계할때도 좋고 프로젝트를 진행하는 과정에서 문제가 없을 것 같아 기획을 하는데 시간이 많이 걸리더라도 확실히 하는게 좋다고 생각한다.</li>
</ul>
</li>
<li>날씨 API, 지도 API 사용법 익히기
<ul>
<li>프로젝트에 필요한 핵심 기능 중 하나인 날씨 API와 지도 API 사용법을 익혀보았다. 외부 API를 사용하는것은 처음인데 문서가 정리가 잘 되어있어 쉽게 사용할 수 있을것 같았다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>프로그래머스 구명보트, 섬 연결하기</p>
</li>
<li>
<p>실전 프로젝트 API 설계</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Spiral Matrix]]></title>
    <link>https://dgd03146-github-io.vercel.app//220807-Spiral-Matrix</link>
    <pubDate>2022-08-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220807-Spiral-Matrix</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg"></p>
<pre><code class="code-highlight"><span class="code-line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
</span><span class="code-line">Output: [1,2,3,6,9,8,7,4,5]
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg"></p>
<pre><code class="code-highlight"><span class="code-line">Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
</span><span class="code-line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &#x3C;= m, n &#x3C;= 10</code></li>
<li><code>100 &#x3C;= matrix[i][j] &#x3C;= 100</code></li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">spiralOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> bottom <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> size <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">*</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> right <span class="token operator">&#x26;&#x26;</span> result<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      result<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    top<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> bottom <span class="token operator">&#x26;&#x26;</span> result<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      result<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    right<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">>=</span> left <span class="token operator">&#x26;&#x26;</span> result<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      result<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    bottom<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">>=</span> top <span class="token operator">&#x26;&#x26;</span> result<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      result<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    left<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>left, right, top, bottom 위치를 정해놓고 result 빈 배열에 넣으면서 result 배열이 전체 숫자 개수의 크기를 넘기면 안되므로 result 배열의 길이를 size보다 작게 한다.</p>
<p>각 위치에서 left는 right 보다 작거나 같을때 까지, top은 bottom보다 작거나 같을때까지 for문을 계속 반복한다.</p>
<p>문제를 직관적으로 푸는 방법이다. 다른 방법이 생각 나지 않을때 문제 요구 사항을 그대로 따라하는 코드도 짜보도록 고려해보아야겠다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220807]]></title>
    <link>https://dgd03146-github-io.vercel.app//220807</link>
    <pubDate>2022-08-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220807</guid>
    <description>
    <![CDATA[실전 프로젝트 기획 회의, 미니 프로젝트 배포]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>실전 프로젝트 기획 회의
<ul>
<li>디자이너님께서 기획회의에 같이 참여하시고 싶다고 하셔서 디자이너님이 짜오신 와이어프레임을 보면서 다른 팀원들과 기획에 대해서 다시 얘기를 하였다. 디자이너님이 적극적으로 의견을 내주셔서 좋았고 좋은 아이디어들이 있었지만 개발 과정에서 구현 가능성을 검토를 해야하기에 섣불리 정할수는 없었다. 다른 팀원들과 더 상의를 해보면서 설계를 확실히 해야할 것 같다. 기획을 하고 설계를 하는것은 확실히 어려운 듯 하다.
모든 사람들의 의견이 다 다르고 우리가 이 프로젝트를 통한 목적이 분명해야하는데 그것을 정하는 것은 쉽지가 않다. 모두가 적극적으로 참여해서 얘기를 많이 나눌수 있어서 이러한 점은 차차 개선이 될 것 같다.</li>
</ul>
</li>
<li>미니 프로젝트 배포
<ul>
<li>미니 프로젝트 마지막으로 기능 점검을 하고 프론트, 백 따로 배포를 하였다. 비록 마감시한 안에 과제 제출은 못했지만 끝까지 팀원들과 팀장으로써 책임감을 지고 마무리를 했다는 것에 의의를 둔다.</li>
</ul>
</li>
<li>WIL 작성</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>클론코딩 프로젝트 React-Query로 무한 스크롤 구현</p>
</li>
<li>
<p>실전 프로젝트 기획 회의</p>
</li>
<li>
<p>오픈 API 사용법 익히기</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 7주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220807-wil</link>
    <pubDate>2022-08-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220807-wil</guid>
    <description>
    <![CDATA[클론코딩 주차]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="클론-코딩-프로젝트" class="heading">클론 코딩 프로젝트</h2>
<p>클론코딩 프로젝트 주차가 시작이 되었다! 이번주만 마치면 바로 실전 프로젝트를 하다니 시간이 정말 빠르게 가는것 같다. 그동안 나는 얼마나 늘었을까..? 실감이 잘 나지 않는다. 백엔드와 협업하는 두번째 주차인데 확실히 전보다 진행이 원활하게 되었다.</p>
<p>클론코딩을 하는 거기 때문에 팀원들마다 각자 클론코딩을 하고 싶은 사이트와 하고 싶은 기능도 다르기 때문에 정하는데 시간이 많이 걸렸던 것 같다. 1주밖에 안되는 시간이기에 클론코딩을 하더라도 모든 기능을 구현을 못하고 특정 기능을 구현해야하는데 스코프를 정하는게 쉽지 않았다.</p>
<p>각자 제시한 클론코딩 사이트의 장단점과 특정 기능의 스코프를 판단하여 정하였는데 우리 조는 텀블벅 웹사이트를 클론 코딩하기로 정하였다. 텀블벅에는 많은 기능이 있지만 우리가 정한 기능은 아래 SA링크에서 확인할 수 있다.</p>
<p><a href="https://www.notion.so/tumblbug-2-256d08cd3a8d43c4ad955cf40f8c83a3" target="_blank" rel="noopener noreferer">SA링크</a></p>
<p><a href="https://github.com/HangHae99-Tumblbug/frontend" target="_blank" rel="noopener noreferer">깃헙 링크</a></p>
<p><a href="https://www.youtube.com/watch?v=pitNSMnWOXs" target="_blank" rel="noopener noreferer">시연 영상 링크</a></p>
<br/>
<h3 id="새롭게-알게-된-것">새롭게 알게 된 것</h3>
<p><strong>styled-component</strong></p>
<p>항상 POST CSS를 사용하여서 CSS 작업을 하였는데 같이 협업하는 프론트엔드 분이 styled-component로 작성을 제안하셔서 한번 써보게 되었다. styled component는 JS를 CSS에서 사용할 수 있어서 아주 편한것 같다고 느꼈다. 익숙치 않아서 CSS를 구성하는데 시간이 걸렸지만 적응만 하면 좋은 CSS 툴인것 같다.</p>
<p><strong>React-query</strong></p>
<p>서버에서 데이터를 받아오고 전달하는 비동기 과정에서 React-query를 사용하였다. 처음 사용해보아서 공식문서도 읽고 다른 유튜브 강의 영상도 보면서 적용을 하였다. 확실히 boiler plate가 없어서 코드가 간결하였다. React-query는 아래와 같은 장점이 있다.</p>
<ol>
<li>서버 데이터 캐싱</li>
<li>데이터 패칭 시 로딩, 에러 처리를 한 곳에서 처리 가능</li>
<li>prefetching, retry 등 다양한 옵션</li>
<li>쉬운 상태 관리</li>
</ol>
<p>이번 프로젝트에서 React-query를 사용하면서 느꼈던 장점들이다. 특히 로딩, 에러 처리를 한 곳에서 처리를 가능하게 한다는 점을 잘 적용시켜서 매니저님께 칭찬도 받았다. 데이터를 받아오는 과정에서 기존의 데이터가 나타났다가 사라지는 트러블 슈팅을 겪었는데 옵션을 설정해주면 된다고 한다.</p>
<p>useQuery에서 데이터를 패칭하는 것이 눈으로 보여지는 과정이 아니라 내부에서 동작하는 과정이라 쉽게 와닿지 않아 어렵다고들 한다. 아직 감이 잘 안잡히지만 다음 프로젝트에서도 사용을 다시 해보아야겠다.</p>
<p><strong>Git branch로 협업하기</strong></p>
<p>저번에도 마찬가지로 새롭게 배우긴 하였지만 혼자서 적용해보니 어떻게 되어가는지 잘 몰랐다. 이번에는 진짜 다른 프론트 분과 페이지별로 나누고 브랜치를 나누어 분할로 작업을 하였다. 각자 브랜치에서 작업을 하고 pull request 요청을 통해서 merge를 하면서 conflict 해결을 하였는데 이번에야말로 진짜 협업 작업을 하는것 같다고 느꼈다.</p>
<br/>
<h3 id="아쉬웠던-점">아쉬웠던 점</h3>
<p>styled component를 처음 써봐서 적응을 하고 익히는데 시간이 조금 걸렸다. 그리고 태그들을 다 컴포넌트들로 만들어서 엄청나게 많은 태그들이 컴포넌트들로 구성이 되어서 가독성이 별로 좋지 않게 작성하였던 것 같다.</p>
<p>React-query로 무한스크롤 구현을 하려고 하였으나 마감 시한 안에 구현을 하지 못하였다. 추후에 무한스크롤을 구현하는 방법을 익혔고 시간이 있을때 코드 리팩토링을 하면서 구현을 해볼 예정이다.</p>
<p>useQuery 패칭 원리를 잘 모르고 쓰는 느낌이 들었다. 코드를 작성했을때 내가 작성한 코드가 맞게 되는지 의문이 들면서 작성하였던 것 같다. React-query를 쓰는 것은 좋지만 깊이 있는 공부가 필요할 것 같다.</p>
<br/>
<h3 id="보완하고-싶었던-점">보완하고 싶었던 점</h3>
<p>검색을 할때 실시간 검색 기능 구현</p>
<p>프로젝트를 수정, 삭제 하는 기능을 구현</p>
<p>최적화를 통해 렌더링 시간을 줄이기</p>
<p>무한 스크롤링 구현</p>
<br/>
<h2 id="회고" class="heading">회고</h2>
<p>이번주에는 팀원들을 잘 만나게 되어서 행복했던 주인것 같다. 잘하시는 백엔드 분들과 프론트 분들을 만나게 되어서 프로젝트를 진행하는데 막힘이 없었다.</p>
<p>백엔드 분들이 작업을 엄청 빠르게 해주셔서 프론트엔드 작업에 속도를 가할수 밖에 없었다. 특히 UI를 구성하는 부분에서 실제 웹사이트를 따라하려고 하다보니 시간이 많이 걸릴수 밖에 없어서 잠도 줄이고 피곤에 쩌든채 코딩을 계속하는 그런 한 주였다.</p>
<p>두번째로 진행된 백엔드와의 협업이었는데 확실히 API 설계를 할때 익숙해지게 된 것 같고 새로운 기술도 써보고 새로운 기능도 만들어보면서 성장을 하게 되었던 것 같다.</p>
<p>프로젝트를 잘 마무리 할 수 있어서 좋았고 좋은 팀원들과 함께해서 행복한 주였다.</p>
<br/>
<h2 id="마치며" class="heading"><strong>마치며</strong></h2>
<p>벌써 클론코딩주차가 끝나고 이제 대망의 마지막 6주 실전프로젝트만 남았다. 실전 프로젝트에서는 리더 부리더 신청을 받는데 아마 리더를 지원하게 될 것 같다. 책임감을 가지고 프로젝트를 주도적으로 이끌어나가고 싶기때문이다. 좋은 팀원들을 만나서 마지막 6주를 제대로 항해를 해보자!</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[LeetCode] Diagonal Traverse]]></title>
    <link>https://dgd03146-github-io.vercel.app//220806-Diagonal-Traverse</link>
    <pubDate>2022-08-06</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220806-Diagonal-Traverse</guid>
    <description>
    <![CDATA[Array and String]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="description" class="heading">Description</h2>
<p>Given an <code>m x n</code> matrix <code>mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg" alt="https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg"></p>
<pre><code class="code-highlight"><span class="code-line">Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
</span><span class="code-line">Output: [1,2,4,7,5,3,6,8,9]
</span><span class="code-line">
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: mat = [[1,2],[3,4]]
</span><span class="code-line">Output: [1,2,3,4]
</span><span class="code-line">
</span></code></pre>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n == mat[i].length</code></li>
<li><code>1 &#x3C;= m, n &#x3C;= 104</code></li>
<li><code>1 &#x3C;= m * n &#x3C;= 104</code></li>
<li><code>105 &#x3C;= mat[i][j] &#x3C;= 105</code></li>
</ul>
<br/>
<h2 id="submission" class="heading">Submission</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">findDiagonalOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">let</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>rows <span class="token operator">+</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        result<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        result<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> result<span class="token punctuation">.</span><span class="token method function property-access">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p><strong>Submission Detail</strong></p>
<table>
<thead>
<tr>
<th>32 / 32 test cases passed.</th>
<th>Status: Accepted</th>
</tr>
</thead>
</table>
<p>| Runtime: 153 ms
Memory Usage: 49 MB | Submitted: 0 minutes ago |</p>
<p>행과 열의 합이 핵심이다. 행과 열의 합이 짝수이면 위에서 부터 내려가고 홀수 이면 아래에서부터 올라오면서 숫자가 시작이된다. 이중배열을 만들어서 선언을 한 다음 키값이 짝수일때는 앞에서 부터 배열에 넣고 홀수 일때 뒤에다가 배열에 추가해주면 된다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220806]]></title>
    <link>https://dgd03146-github-io.vercel.app//220806</link>
    <pubDate>2022-08-06</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220806</guid>
    <description>
    <![CDATA[실전 프로젝트 와이어프레임, LeetCode]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>실전 프로젝트 와이어프레임 점검</li>
<li>LeetCode 1문제
<ul>
<li>LeetCode에 유형별로 쉬운 문제가 있어서 풀었는데 아직 어렵다. 코드를 어떻게 짜야하는지 감이 잘 오지 않는다. 계속 꾸준히 풀어봐야겠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 기획 회의</p>
</li>
<li>
<p>미니 프로젝트 배포</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220805]]></title>
    <link>https://dgd03146-github-io.vercel.app//220805</link>
    <pubDate>2022-08-05</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220805</guid>
    <description>
    <![CDATA[실전 프로젝트 기획 및 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>실전 프로젝트 기획 및 설계
<ul>
<li>실전 프로젝트 주차가 시작되었다. 새로운 팀원들을 만났고 이번에 리더로 지원하게 되어서 앞으로 6주동안 팀을 잘 이끌어가봐야겠다는 책임감이 생겼다.</li>
<li>팀원마다 의견이 다 다르고 6주동안 진행하는 마지막 큰 프로젝트기에 프로젝트 주제를 정하는것이 쉽지 않았다. 각자가 하고 싶은 프로젝트를 정하고 장단점을 분석하여 주제를 정하였다. 주제를 정하고 나니 쉽게 진행이 되었다.</li>
</ul>
</li>
<li>실전 프로젝트 와이어 프레임 작성
<ul>
<li>와이어 프레임을 잘 작성할수록 디자이너님이 뷰를 쉽게 구현할 수 있을것 같아 최대한 와이어프레임을 꼼꼼하게 작성하였다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>Leet Code 2문제</p>
</li>
<li>
<p>리액트 개념 공부 및 블로그 정리</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220804]]></title>
    <link>https://dgd03146-github-io.vercel.app//220804</link>
    <pubDate>2022-08-04</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220804</guid>
    <description>
    <![CDATA[프로젝트 최종 마무리]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로젝트 최종 발표
<ul>
<li>React query로 데이터를 사용하는 것을 칭찬 받았다. 새롭게 시도해본것을 칭찬해주셨고 코드를 맞게 잘 작성하셨다고 했다. React 쿼리에 대한 개념이 아직 부족한거 같은데 다른 옵션들을 잘 사용할 수 있도록 해야겠다.</li>
<li>좋은 팀원들을 만나서 쉽게 프로젝트를 마무리 할 수 있어서 기분이 좋다.</li>
</ul>
</li>
<li>트러블 슈팅
<ul>
<li>트러블 슈팅들을 정리하면서 코드 회고를 해보았느데 아직 불필요한 코드가 많다는 것을 느꼈다. 프로젝트를 끝내도 리팩토링을 하면서 코드를 개선해보아야겠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>실전 프로젝트 SA 작성</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220803]]></title>
    <link>https://dgd03146-github-io.vercel.app//220803</link>
    <pubDate>2022-08-03</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220803</guid>
    <description>
    <![CDATA[상세 페이지 UI 퍼블리싱]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>상세페이지 기능 구현
<ul>
<li>useMutation 사용하여 api로 post 요청을 해보았는데 useQuery에 조금 익숙해지는 느낌이다.</li>
</ul>
</li>
<li>작업 내용 Merge 후 conflict 해결
<ul>
<li>Pull request를 요청하고 Merge 작업을 처음 해보았는데 확실히 협업을 할때 분리해서 하는게 편한것 같다.</li>
</ul>
</li>
<li>추가작업
<ul>
<li>검색 기능 구현
<ul>
<li>검색 기능을 처음 구현해보았는데 api로 요청만 받으면 되어서 쉽게 할 수 있었다. 실시간 검색으로 하는 방법을 더 추가적으로 할 수 있을지 고려해보아야겠다.</li>
</ul>
</li>
<li>필터 기능 구현</li>
<li>반응형 구현</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>프로젝트 최종 제출 및 발표</p>
</li>
<li>
<p>트러블 슈팅 정리 및 리드미 작성</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220802]]></title>
    <link>https://dgd03146-github-io.vercel.app//220802</link>
    <pubDate>2022-08-02</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220802</guid>
    <description>
    <![CDATA[React query 개념 공부, 메인 페이지 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React query 개념 공부
<ul>
<li>쿼리를 처음 사용해서 적용을 하는데 아직 개념이 확실하지 않는듯 하다. 어떻게 하다보니 구현을 하였는데 이게 맞게 적용이 되는건지를 몰랐다.</li>
<li>useQuery 내부에서 바뀐 state의 값의 최신화가 적용 되질 않는 어려움을 겪었다.</li>
</ul>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  queryClient<span class="token punctuation">.</span><span class="token method function property-access">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">'projects_category'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function">refetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/d2c9f5bf-d9f0-448b-9536-51306c7c8efe/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220806%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220806T065907Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=da15823d53e6fa45b2d45fc2bfcb07b3f6bddfb65b04e351671ca2942b0eee17&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22&#x26;x-id=GetObject" alt="Untitled">
react-query가 업그레이드 되면서 invalidateQueries 사용 방법이 조금 바뀌었는데 refetchType에 옵션을 all로 설정하여 해결을 하면 된다고 한다</li>
<li>메인페이지 기능 구현
<ul>
<li>카테고리</li>
</ul>
</li>
</ul>
 <br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>상세 페이지 기능 구현</li>
<li>Git Merge하기</li>
<li>추가 기능 구현
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220801]]></title>
    <link>https://dgd03146-github-io.vercel.app//220801</link>
    <pubDate>2022-08-01</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220801</guid>
    <description>
    <![CDATA[상세 페이지 UI 퍼블리싱]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>상세 페이지 UI 퍼블리싱 - CSS로 상세 페이지를 구현하는데 시간이 많이 걸렸다. 웹사이트를 직접 클론코딩을 하다보니 생각보다 시간이 많이 소모되었고 나의 부족한 CSS 지식으로는 하나하나 검색하면서 하다보니 어려움을 겪었다. 시맨틱하게 매우 세부적으로 HTML 태그들이 나눠져 있는걸 알게 되었고 다음에 퍼블리싱 작업을 할때도 적용을 해보아야겠다. - 이번에 React quill 이라는 글쓰기 에디터 라이브러리를 사용하여 HTML 값을 받아오는데 HTML을 문자 형태로 리액트에 추가하려면 <code>dangerouslySetInnerHTML</code> 을 사용하여야 한다. 하지만 이 방식 그대로 쓰면 해킹에 취약하기에 보안에 약하다. - <code>DOMpurify</code> 라이브러리를 사용하면 해킹에 취약한 문제점을 해결할 수 있다.
<code>jsx &#x3C;div className="view ql-editor" style={{ padding: 0 }} dangerouslySetInnerHTML={{ __html: sanitizer( `&#x3C;p>오 혹시 이것도 되나요&#x3C;/p>&#x3C;iframe class="ql-video" frameborder="0" allowfullscreen="true" src="https://www.youtube.com/embed/kORKuULdiKM?showinfo=0">&#x3C;/iframe>&#x3C;p>&#x3C;br>&#x3C;/p>`, { ALLOWED_TAGS: ['iframe'], ADD_ATTR: [ 'allow', 'allowfullscreen', 'frameborder', 'scrolling' ] } ) }} >&#x3C;/div> </code>
<br/></li>
</ul>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>React Query 개념 공부</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220731]]></title>
    <link>https://dgd03146-github-io.vercel.app//220731</link>
    <pubDate>2022-07-31</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220731</guid>
    <description>
    <![CDATA[클론코딩 주차 발제, SA 작성 및 프로젝트 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>WIL 작성</li>
<li>메인페이지 UI - 클론 코딩을 하면서 그냥 Inspector에서 가지고 오면 될거라고 생각했는데 그것을 그냥 가져오면서 나의 CSS에 적용을 하려고 하니 생각보다 쉽지 않았다. - CSS 작업을 빨리 끝내야 기능 구현을 할 수 있을텐데 아직 익숙치 않은것 같다. 아마 styled-component로 처음 사용해봐서 더 오래 걸리는 것 같기도 하다.
<br/></li>
</ul>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>상세 페이지 UI 만들기
<br/></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 6주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220731-wil</link>
    <pubDate>2022-07-31</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220731-wil</guid>
    <description>
    <![CDATA[미니프로젝트 주차]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="미니-프로젝트" class="heading">미니 프로젝트</h2>
<p>이번주는 미니프로젝트 주차로 처음으로 백엔드와 협업하는 조였다. 이번주에도 어쩌다보니 팀장을 맡게 되었다… 벌써 4번째 팀장?! 하지만 팀장을 하는거도 좋은 경험이라고 생각한다. 책임감이 생기다보니 더욱 열심히 임하게 된것 같다. 이번주차는 항해를 하면서 가장 힘든 주차가 아니었나 하는 생각이 든다. 여러가지 난항을 많이 겪었는데 밑에 회고란에서 자세히 써보려 한다.</p>
<p>주제는 팀원들끼리 상의해서 정할 수 있었다. 백엔드와의 첫 협업이라 설레기도 하고 새롭게 무언가를 한다는 것에 두렵기도 하였다. 그렇게 정한 우리 조의 주제는 기술 면접 질문 모음 사이트를 만드는거로 정하였다. 저번주에 배웠던 기능들을 복습하는 느낌으로 하는거여서 스코프는 개인과제와 비슷하게 기능을 정하였다. 우리조가 정한 기능은 아래와 같다.</p>
<p><a href="https://www.notion.so/3-05f4cb72bb1b4f6f8081fe4f29a60224" target="_blank" rel="noopener noreferer">SA 링크</a></p>
<br/>
<h3 id="구현-기능">구현 기능</h3>
<p><strong>1. 메인 페이지</strong></p>
<ul>
<li>게시글 목록 가져오기</li>
<li>기술별로 카테고리 불러오기</li>
<li>게시글 하나에 작성자, 작성 시간, 텍스트 내용으로 구성</li>
<li>게시글 하나 클릭 시 게시글 상세 페이지로 이동</li>
</ul>
<p><strong>2. 상세 페이지</strong></p>
<ul>
<li>게시글 작성</li>
<li>게시글 수정</li>
<li>게시글 삭제</li>
<li>본인의 게시글이면 수정, 삭제 버튼이 생긴다.</li>
<li>텍스트 입력 중 안 된 게 있으면 게시글 작성 버튼 비활성화</li>
<li>작성 완료 시 메인 페이지로 이동</li>
</ul>
<p><strong>3. 마이 페이지</strong></p>
<ul>
<li>본인의 게시물 조회 가능</li>
<li>게시글 누르면 게시글 상세 페이지로 이동</li>
</ul>
<p><strong>4. 댓글</strong></p>
<ul>
<li>댓글 작성</li>
<li>댓글 수정</li>
<li>댓글 삭제</li>
</ul>
<p><strong>4. 로그인하기</strong></p>
<ul>
<li>이메일, 비밀번호 미기입 시 로그인 버튼 비활성화 하기</li>
</ul>
<p><strong>5. 회원가입하기</strong></p>
<ul>
<li>이메일 형식 확인하기</li>
<li>비밀번호 재확인하기</li>
</ul>
<br/>
<h3 id="아쉬웠던-점">아쉬웠던 점</h3>
<p>CSS 라이브러리를 안쓰고 순수 CSS로 구현하여서 시간이 많이걸렸다.</p>
<p>API 설계를 처음에 제대로 해놓지 않아서 API를 수정하면서 코드를 작성하였고 API 대로 request와 response가 달라 코드 오류가 많이 떴다.</p>
<p>시간이 없어서 MOCK API로 테스트를 다 해보지 못한채 코드를 짜서 제대로 작동되는지 체크를 바로 못하여 서버와 연결할때 많은 오류를 겪었다.</p>
<p>유효성검사를 백에서만 해주어서 프론트에서는 유효성 검사에 따른 메세지를 나타내지 못하였다.</p>
<p>로딩스피너 구현을 계획 하였으나 시간이 없어 하지 못하였다.</p>
<p>무한스크롤 구현을 이번에도 하지 못하였다.</p>
<p>로그인 없이 주소로 접근을 바로 하는것을 막지 못하였다.</p>
<p>코드 구현에서 놓치거나 아쉬웠던 점이 꽤 많다. 구현하려고 했으나 못 구현한 기능도 꽤 있고 너무 촉박하게 하려다보니 코드의 가독성도 꽤 떨어지는 것 같다. 리팩토링을 다시 하면서 코드를 수정해나가고 못해본 기능들도 마저 구현해보고 싶다.</p>
<br/>
<h3 id="보완하고-싶었던-점">보완하고 싶었던 점</h3>
<p>무언가 새로운것을 시도해보지 못하여 다음에는 꼭 새로운 기능이나 기술을 시도해보고 싶다.</p>
<p>CSS 라이브러리를 써서 시간을 더 줄였으면 추가 기능 구현을 할 수 있었을 것 같다.</p>
<p>최적화를 통해 렌더링 시간을 줄이고 싶다.</p>
<p>무한 스크롤링을 구현하고 싶다.</p>
<p>반응형을 통해 모바일에서도 잘 보이게 하고 싶다.</p>
<br/>
<h3 id="새롭게-알게-된-것">새롭게 알게 된 것</h3>
<p><strong>json-server 와 Mock API 이용하기</strong></p>
<p>Mock API를 통해 백에서 데이터를 넘겨주기 전에 프론트에서 서버와 통신하는 것을 연습해 볼 수 있다. 미리 API 통신을 연습해 볼 수 있기에 MOCK API를 만들어서 테스트를 한 후 서버와 연결하게 되면 더 효율적일 것 같다.</p>
<p><strong>JWT로 로그인/회원가입</strong></p>
<p>JWT로 로그인 회원가입을 할때 어떻게 동작하는지 원리를 알게 되었다. 로그인을 할때 서버에서 토큰을 받아와 토큰을 저장한 다음 그 토큰으로 API 통신을 할때 HEADER에 넘겨준다. 그러면 서버에서는 로그인이 필요한 동작을 할때 그 토큰으로 로그인 여부를 판단할 수 있다.</p>
<p><strong>Git branch로 협업하기</strong></p>
<p>비록 혼자 프론트를 진행하였지만 협업을 하는것처럼 브랜치를 나누어서 pull request 요청을 하고 merge 하는 작업을 진행하였다. 혼자서 해보긴 하였지만 원리를 이해하였고 다음주에는 다른 분들과 함께 직접 branch로 협업하는 과정을 겪어보고 싶다.</p>
<br/>
<h2 id="회고" class="heading">회고</h2>
<p><strong>협업의 중요성을 알게 되었다.</strong></p>
<p>팀장으로써 팀을 이끌어가는것도 꽤나 쉬운일이 아니었다. 같이 하는 프론트엔드 분은 지난 주차들동안 무엇을 하였는지도 모를 정도로 React에 대한 개념이 전혀 없었고 태도도 전혀 좋지 않았으며 부족한 만큼 열심히 하려고 하는 의지조차 없어서 소통에 너무나 애를 겪었다. 결국 멘토님께 말씀 드리고 나서 멘토님의 의견에 따라 프론트엔드를 혼자 진행하기로 결정하였다.</p>
<p>한 백엔드분의 무책임한 탈주가 있었다.</p>
<p>정말 다시는 만나고 싶지 않고 겪고 싶지 않은 상황이었다. 백엔드와 협업을 하는 첫주차부터 프론트엔드를 혼자 진행을 하는것과 더불어 게시판이라는 중요한 역할을 맡은 백엔드 분이 참여하실것 처럼 하다가 과제 제출 하루 전날에 잠수를 타는 어이가 없는 상황을 겪었다. 이러한 어려움을 해결하는것도 하나의 트러블 슈팅이 될까.. 결국 나머지 백엔드 두분이 저녁부터 진행을 하게 되었으나 과제를 제출하기에는 시간이 너무 부족했었다.</p>
<p>다시는 이러한 상황을 겪고 싶지 않다. 협업을 할때에는 태도와 소통이 정말 중요하다고 생각한다. 실력이 부족해도 열심히 하는 의지만 있다면 서로 도와주면서 작업을 진행할 수 있을것이다. 하지만 이번처럼 이런 이기적인 행동은 첫 협업 과정에서 나에게 너무나 힘들었던 것 같다. 긍정적으로 남은 팀원들끼리 마감시한까지 최선을 다하였지만 이런 예기치 못하게 발생하는 상황들을 해결하는 것은 쉽지 않았다. 과제 제출을 못한 것이 너무 아쉬웠고 내가 조금 더 실력이 있었다면 충분히 마무리할 수 있지않았을까 하는 실력에 대한 아쉬움도 너무 컸다.</p>
<p>마저 못한 미니 프로젝트는 나머지 팀원들과 함께 끝까지 진행하도록 하였다. 끝까지 진행해서 깃헙에 올리고 리드미도 써서 우리의 시간이 아깝지 않게 하여야겠다. 같이 끝까지 열심히 해주신 팀원들에게 너무 감사하다.</p>
<br/>
<h2 id="마치며" class="heading"><strong>마치며</strong></h2>
<p>Axios를 통한 백엔드와의 통신에 대해 조금 더 이해를 할 수 있었고 동작원리를 알게 되었다. 혼자서 프론트를 하다보니 여러 분들에게 많이 물어보곤 했었는데 그 과정에서 정말 많이 배운것 같다. 그 배운 것들을 다음 프로젝트에도 사용해보면서 나의 것으로 익혀야겠다.</p>
<p>협업의 중요성을 많이 깨우친 이번주이다. 다음에는 좋은 팀원들을 만나 행복 코딩하고 싶다.
<br/></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220730]]></title>
    <link>https://dgd03146-github-io.vercel.app//220730</link>
    <pubDate>2022-07-30</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220730</guid>
    <description>
    <![CDATA[클론코딩 Main 페이지 UI, 그리디 알고리즘, 미니 프로젝트]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로그래머스 그리디 알고리즘 2문제
<ul>
<li>아직은 레벨 2를 풀 단계가 아닌가라는 생각이 든다. 그리디 알고리즘 개념에 대해 학습을 하고도 문제를 보면 코드를 어떻게 짜야할지 막막하다. 답을 보고 이해를 하는 식으로 넘어가고 있는데 옳은 방법인지 잘 모르겠다. 넘어간 문제는 꼭 다시 풀어서 내 것으로 만드는 과정을 겪어야겠다.</li>
</ul>
</li>
<li>메인페이지 UI
<ul>
<li>Header를 만들었다. 스타일드 컴포넌트를 처음 써봐서 아직 많이 익숙치 않다. 클론코딩을 하다보니 UI적 요소가 강한데 생각보다 시간이 걸린다.</li>
<li>React-router 6에서 사용하는 Outlet을 사용해보았다. 다른 분이 Route 안에 Route를 설정하여 자식 코드들의 위치를 Outlet으로 설정하는 것을 보았는데 나도 한번 적용시켜보고 싶었는데 App.jsx에서 Router에 관련된것만 볼 수 있기에 가독성에 좋은것 같았다.</li>
</ul>
</li>
<li>미니 프로젝트 클라이언트와 서버 합치기
<ul>
<li>프론트엔드 기능적 구현을 다하였고 서버와 합쳤다. 합치는 과정에서 API 명세서대로 request와 response값들이 조금 달라서 오류를 많이 겪었다. API 명세서대로 코드를 작성하는 것의 중요성을 알게 되었다.</li>
<li>기본 기능 구현은 다하였고 마무리로 UI 반응형과 무한 스크롤링, 유효성 검사가 남았다. 무한 스크롤링을 구현해본적이 없었는데 이번에 해보면서 클론코딩에도 한번 적용시켜보아야겠다.</li>
<li>데이터를 받아오는 과정에서 데이터가 비동기로 받아와지기 전에 데이터가 없는 경우에는 옵셔널 체이닝을 통해서 확인을 해주어야하는 것을 배웠다. 아니면 .then을 사용하여서 비동기가 완료되었을때 데이터를 불러오게 코드를 작성하여야한다. 이 오류 덕분에 조금 시간이 걸렸는데 다른 분들의 도움으로 해결할 수 있었다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>
<p>WIL 작성</p>
</li>
<li>
<p>메인 페이지 UI 마무리</p>
</li>
<li>
<p>게시글 상세 페이지 UI</p>
</li>
<li>
<p>블로그 구글 검색 엔진 노출</p>
<br/>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220729]]></title>
    <link>https://dgd03146-github-io.vercel.app//220729</link>
    <pubDate>2022-07-29</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220729</guid>
    <description>
    <![CDATA[클론코딩 주차 발제, SA 작성 및 프로젝트 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>클론코딩 주차 발제
<ul>
<li>클론 코딩 주차가 시작이 되었다. 우리조는 텀블벅이라는 사이트를 클론코딩 하기로 정하였다. 텀블벅은 와디즈 같은 펀딩 모금 사이트이다.</li>
<li><a href="https://www.notion.so/tumblbug-2-256d08cd3a8d43c4ad955cf40f8c83a3" target="_blank" rel="noopener noreferer">SA 작성</a>
<ul>
<li>1주 밖에 안되는 만큼 스코프를 적절히 정해야했다. 실제 웹사이트는 기능이 워낙 많아서 그걸 다 구현하는것은 힘들다. 팀원들과 상의해서 API 설계를 하고 기능을 정하였다.</li>
<li>클론코딩을 하는거라 확실히 UI 측면에서 프론트가 할일이 많아 보였다. 미리미리 시작해야겠다.</li>
</ul>
</li>
</ul>
</li>
<li>미니프로젝트 댓글 수정 구현 - 본인 아이디의 모든 댓글 수정 삭제하는 기능을 구현하였다 기존에 구현하였던 댓글 수정 삭제는 본인 아이디 댓글중 하나의 댓글만 삭제하는것이었는데 같은 아이디로 등록된 댓글들의 수정, 삭제를 할 수 있어야했기에 로직을 다시 짰다. state를 좀 많이 사용한것 같은데 더 효율적인 방법이 있을지 Refactoring을 하면서 코드를 간소화 시켜보아야겠다.
<br/></li>
</ul>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>메인 페이지 UI</li>
<li>프로그래머스 그리디 알고리즘 2문제</li>
<li>미니 프로젝트 서버와 연결하기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220728]]></title>
    <link>https://dgd03146-github-io.vercel.app//220728</link>
    <pubDate>2022-07-28</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220728</guid>
    <description>
    <![CDATA[미니 프로젝트 구현, Axios instance]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>미니 프로젝트 기능 구현
<ul>
<li>댓글 작성 CRUD 구현</li>
<li>로그인 시 회원가입 유지 구현</li>
<li>로그인 방식을 세션에서 JWT로 바꾸고 다시 로그인 회원가입을 다시 통신을 해보았다.
<ul>
<li>Axios를 전역으로 설정하고 헤더에 토큰을 전달하였다. Axios를 전역으로 설정하여 주소 api를 변수로 작성하여 코드를 간결하게 작성할 수 있었다.</li>
</ul>
</li>
</ul>
</li>
<li>미니 프로젝트 제출날이었는데 팀원의 이탈로 인해 기능 구현을 다 못하였다.
<ul>
<li>기능 구현을 다 하지 못해서 제출을 못했었던 점이 너무 아쉬웠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>미니 프로젝트 게시판 연결</li>
<li>클론코딩 프로젝트 발제 및 SA 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220727]]></title>
    <link>https://dgd03146-github-io.vercel.app//220727</link>
    <pubDate>2022-07-27</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220727</guid>
    <description>
    <![CDATA[미니 프로젝트 구현, 게시판 CRUD 작성]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>미니 프로젝트 구현
<ul>
<li>게시물 CRUD 완성
<ul>
<li>짜여진 API 명세서대로 게시판 CRUD를 완성하였다.</li>
</ul>
</li>
<li>API 명세서 재작성
<ul>
<li>로직을 짜면서 API 명세서가 제대로 있지 않은 점을 발견하였다. 받아오거나 전달하는 데이터가 제대로 되어 있지 않아 백엔드 분들과 여러번 API 명세서를 다시 작성하는 경우가 발생하였다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>JWT 로그인 방식으로 회원가입 로그인 연결</li>
<li>API 명세서대로 CRUD 로직 짜기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220726]]></title>
    <link>https://dgd03146-github-io.vercel.app//220726</link>
    <pubDate>2022-07-26</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220726</guid>
    <description>
    <![CDATA[미니 프로젝트 기능 구현, CORS 에러]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>미니 프로젝트 기능 구현
<ul>
<li>Mock api로 로그인, 회원가입 axios 통신 연습.
<ul>
<li>백엔드와 협업 과정에서 세션 로그인 방식을 통한 로그인, 회원가입을 구현하였다.</li>
</ul>
</li>
<li>백엔드 서버와 회원가입 post시 CORS 에러
<ul>
<li>이번에 백엔드와 처음 데이터 통신을 해보면서 겪은 CORS 문제였다. CORS 문제를 해결하기 위해 거의 백엔드 분들과 하루종일 매달렸었던 것 같다. 서버에서 CORS 설정을 허용하도록 하는 코드 로직을 다른 조 분들의 도움을 받아 해결할 수 있었다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>게시물 CRUD 작성</li>
<li>API 명세서 수정</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220725]]></title>
    <link>https://dgd03146-github-io.vercel.app//220725</link>
    <pubDate>2022-07-25</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220725</guid>
    <description>
    <![CDATA[미니 프로젝트 UI, Greedy 알고리즘]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>Greedy 알고리즘 개념 스터디를 하였다.
<ul>
<li>그리디 알고리즘에 대한 깊은 이해를 할 수 있었다. 완전 탐색과는 다른 최적의 해를 구해간다는점에서 인상적이었다.</li>
</ul>
</li>
<li>게시글 상세 페이지 UI를 구현하였다.
<ul>
<li>혼자서 디자인하고 UI를 구현하다보니 생각보다 시간이 많이 걸렸다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>로그인 회원가입 MOCK API로 통신 연습</li>
<li>서버와 회원가입, 로그인 연결하기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220724]]></title>
    <link>https://dgd03146-github-io.vercel.app//220724</link>
    <pubDate>2022-07-24</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220724</guid>
    <description>
    <![CDATA[미니 프로젝트 UI, 프로그래머스 완전 탐색]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>WIL 5주차 작성</li>
<li>프로그래머스 완전탐색 2문제 풀기
<ul>
<li>아직 DFS에 대한 개념이 부족한 것 같다. 재귀로 함수를 돌때 동작원리에 대한 이해가 부족하여서 문제를 접근하는 방법을 생각하지 못하였다. 완전 탐색 문제를 더 풀어보아야겠다.</li>
</ul>
</li>
<li>미니 프로젝트 UI를 만들었다. - 로그인, 회원가입 UI 완성 - 메인 페이지 UI 완성</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>미니 프로젝트
<ul>
<li>게시글 작성 페이지 UI</li>
<li>게시글 상세 페이지 UI</li>
<li>Mock API 연습</li>
</ul>
</li>
<li>Greedy 알고리즘 개념 공부</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 5주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220724-wil</link>
    <pubDate>2022-07-24</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220724-wil</guid>
    <description>
    <![CDATA[React 심화 주차]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="개인-과제" class="heading">개인 과제</h2>
<p>이번주는 리액트 심화 주차로 개인과제와 팀과제가 주어졌고 조는 저번주와 같이 진행이 되었다.</p>
<p>과제에서 요구되는 기능들이 전보다 많았는데 그 기능들은 아래와 같다.</p>
<br/>
<h3 id="구현-기능">구현 기능</h3>
<ol>
<li>게시글</li>
</ol>
<p><strong>목록 가져오기</strong></p>
<ul>
<li>무한 스크롤</li>
<li>게시글 하나에 작성자, 작성 시간, 이미지 미리보기, 텍스트 내용으로 구성</li>
<li>게시글 하나 클릭 시 게시글 상세 페이지로 이동</li>
<li>게시글 레이아웃에 맞춰 이미지, 텍스트 위치 조절해서 노출</li>
<li>게시글 중 하트 버튼을 클릭하면 하트 색이 바뀌면서 좋아요 개수가 +1, 다시 클릭하면 하트가 다시 회색이 되면서 좋아요가 -1 되도록 구현</li>
</ul>
<p><strong>추가하기 (+이미지 업로드하기)</strong></p>
<ul>
<li>세 가지 레이아웃 중 선택하도록 만들기</li>
<li>레이아웃 선택 시 게시글이 레이아웃대로 보이도록 만들기</li>
<li>이미지 업로드, 텍스트 입력 중 안 된 게 있으면 게시글 작성 버튼 비활성화</li>
<li>작성 완료 시 메인 페이지로 이동</li>
</ul>
<p><strong>삭제하기</strong></p>
<p><strong>수정하기</strong></p>
<ol start="2">
<li>좋아요</li>
</ol>
<p>게시글에 좋아요하기</p>
<p>게시글에 좋아요 취소하기</p>
<ol start="3">
<li>회원가입하기</li>
</ol>
<p>이메일 형식 확인하기</p>
<p>비밀번호 재확인하기</p>
<ol start="4">
<li>로그인하기</li>
</ol>
<p>이메일, 비밀번호 미기입 시 로그인 버튼 비활성화 하기</p>
<ol start="5">
<li>배포하기</li>
</ol>
<p>파이어베이스 or S3로 배포</p>
<p>저번주에는 redux-toolkit을 처음 사용해보아서 익숙치 않았다면 이번주에는 기능을 구현하면서 redux-toolkit을 활용한 CRUD에 조금 더 익숙해졌달까. Firestore를 활용한 데이터를 불러오고 추가하는 것도 공식문서를 보면서 계속 하다보니 많이 익숙해졌다.</p>
<br/>
<h3 id="아쉬웠던-점">아쉬웠던 점</h3>
<p>CSS에 시간을 많이 투자하였는데 생각보다 만족스런 결과가 나오지 않았다. 아직 전체 height를 설정하는것에서 문제를 많이 겪었다. 다른 프론트 분들이 어떻게 적용하는지 궁금해서 도움도 청하고 했는데 아직 어떻게 적용시켜야 전체 화면의 height를 구성할 수 있을지 잘 모르겠다. 멘토님께도 물어보고 다른 프론트 분들께도 계속 정보를 물어보면서 초기 CSS 설정에서 시간을 줄이고 나만의 CSS 초기 세팅을 만들어야겠다.</p>
<p>마이페이지 기능을 추가하여서 그 기능을 구현하는데 시간을 많이 쏟았다. 요구사항에 있던 기능은 아니지만 만들어보고 싶었다. 성공적으로 구현은 했으나 CSS 적용 과정에서 flex와 grid의 개념이 부족하다고 느꼈다. CSS가 유독 어렵다고 많이 느껴진다. 부족한 만큼 찾아서 공부를 해야겠다.</p>
<p>회원가입 유효성 검사를 Input 값에 따른 변화를 바로 인지하면서 하고 싶었는데 어떻게 코드 구현을 해야할지 몰라서 state로 에러를 만들고 회원가입 버튼을 누르면 나오게 하였다. 이 방법도 멘토님께 물어보니 onChange를 사용하여서 구현을 하면 된다고 하였다.</p>
<p>로그인 시 새로고침 정보를 남아있게 하기위해서 세션스토리지에 회원 정보를 저장하고 체크하는 로직을 짰는데 그 로직에서 오류가 있었다. 뭐냐면 새로고침을 해도 리덕스에 user 정보가 있는지 없는지 체크하는 것을 짜주어야 유저정보가 없을때에만 새로고침을 해서 유저정보를 받아오기때문에 불필요한 과정을 줄일 수 있다. 이부분도 고민을 하다가 멘토님이 도움을 주셔서 고치게 되었다.</p>
<p>그 외에 레이아웃에 따른 기능 구현, 무한스크롤링, 좋아요를 누르면 좋아요가 추가되는 기능, 상세 페이지등 추가 기능 구현을 하지 못하였다. 안되는 로직 구현은 일단 넘기고 다른 기능 구현부터 먼저 접근했으면 충분히 가능했을것 같다.</p>
<br/>
<h2 id="이번주-회고" class="heading">이번주 회고</h2>
<p>저번주에 반성과 회고를 통해 이번주는 정말 열심히 임하노라 생각하였다. 다짐 덕분일까 동기부여가 생겼기 때문인지 확실히 저번주보다는 열심히 한 것 같다. 공부 시간을 늘렸고 과제를 구현하기 위해 질문도 많이 하고 적극적인 한 주를 보내었다. 벌써 5주차가 되었다. 이제 대략 2달 정도 남았는데 더 열심히 최선을 다하자. 앞으로 주어진 기회와 시간을 놓치지 않는다면 나는 얼마나 성장할 수 있을까? 기회와 시간을 놓치지 말자!</p>
<br/>
<h2 id="-이번주-키워드" class="heading">🔑 이번주 키워드</h2>
<h2 id="axios" class="heading">Axios</h2>
<h3 id="axios란">Axios란?</h3>
<p>Axios는 node.js와 브라우저를 위한 <em><a href="https://javascript.info/promise-basics" target="_blank" rel="noopener noreferer">Promise 기반</a></em> HTTP 클라이언트이다.</p>
<p>브라우저와 node.js에서 실행할 수 있다. 서버 사이드에서는 네이티브 node.js의 <code>http</code> 모듈을 사용하고, 클라이언트(브라우저)에서는 XMLHttpRequests를 사용한다.</p>
<br/>
<h3 id="특징">특징</h3>
<ul>
<li>브라우저를 위해 <a href="https://developer.mozilla.org/ko/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferer">XMLHttpRequests</a> 생성</li>
<li>node.js를 위해 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener noreferer">http</a> 요청 생성</li>
<li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferer">Promise</a> API를 지원</li>
<li>요청 및 응답 인터셉트</li>
<li>요청 및 응답 데이터 변환</li>
<li>요청 취소</li>
<li>JSON 데이터 자동 변환</li>
<li><a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0" target="_blank" rel="noopener noreferer">XSRF</a>를 막기위한 클라이언트 사이드 지원</li>
</ul>
<br/>
<h3 id="설치">설치</h3>
<p>npm 사용하기:</p>
<pre class="language-powershell"><code class="language-powershell code-highlight"><span class="code-line">$ npm install axios
</span></code></pre>
<br/>
<h3 id="axios-api">*<strong>*Axios API**</strong></h3>
<p><code>axios</code>에 해당 config을 전송하면 요청이 가능하다.</p>
<p><strong>axios(config)</strong></p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// POST 요청 전송</span>
</span><span class="code-line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Flintstone'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// node.js에서 GET 요청으로 원격 이미지 가져오기</span>
</span><span class="code-line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://bit.ly/2mTM3nY'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'stream'</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  response<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token method function property-access">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token method function property-access">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'ada_lovelace.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h3 id="config-option과-응답-스키마"><strong>config option과 응답 스키마</strong></h3>
<p>응답 스키마는 데이터를 받아올 때 알아야 하는데 다음과 같이 6종류가 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// `data`는 서버가 제공한 응답(데이터)입니다.</span>
</span><span class="code-line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// `status`는 서버 응답의 HTTP 상태 코드입니다.</span>
</span><span class="code-line">  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// `statusText`는 서버 응답으로 부터의 HTTP 상태 메시지입니다.</span>
</span><span class="code-line">  <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// `headers` 서버가 응답 한 헤더는 모든 헤더 이름이 소문자로 제공됩니다.</span>
</span><span class="code-line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// `config`는 요청에 대해 `axios`에 설정된 구성(config)입니다.</span>
</span><span class="code-line">  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// `request`는 응답을 생성한 요청입니다.</span>
</span><span class="code-line">  <span class="token comment">// 브라우저: XMLHttpRequest 인스턴스</span>
</span><span class="code-line">  <span class="token comment">// Node.js: ClientRequest 인스턴스(리디렉션)</span>
</span><span class="code-line">  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>then</code>을 사용하면 다음과 같이 응답을 받을 수 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line">axios<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">statusText</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">headers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h2 id="마치며" class="heading"><strong>마치며</strong></h2>
<p>평소에 axios를 쓰다가 fetch가 있는데 왜 굳이 axios를 쓰지? 하는 생각이 많이 들었었는데 이번 기회에 axios를 공부하면서 궁금점을 조금이나마 해결할 수 있었다.</p>
<p>단순히 라이브러리가 유명해서 쓰는 것이 아닌 왜 이 라이브러리를 쓰는지 이 라이브러리의 장점은 꼭 알아야겠다고 생각해서 앞으로도 라이브러리를 하나하나 간단하게라도 정리해볼까 한다.</p>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220723]]></title>
    <link>https://dgd03146-github-io.vercel.app//220723</link>
    <pubDate>2022-07-23</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220723</guid>
    <description>
    <![CDATA[미니 프로젝트 기본 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>미니 프로젝트 기본 설계를 하였다.
<ul>
<li>프로젝트 세팅 및 Main page 기본 Header UI
<ul>
<li>처음 기본 디자인을 설정하는데 reference 사이트들을 찾고 와이어 프레임이 명확하지 않아 어려움을 겪었다.</li>
<li>CSS 설정하는게 아직도 여전히 어려운 것 같다.</li>
</ul>
</li>
<li>API 재설계</li>
<li>와이어 프레임 수정</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 알고리즘 2문제</li>
<li>메인 페이지 UI 마무리</li>
<li>로그인 , 회원가입 UI 마무리</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220722]]></title>
    <link>https://dgd03146-github-io.vercel.app//220722</link>
    <pubDate>2022-07-22</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220722</guid>
    <description>
    <![CDATA[미니 프로젝트 주차 발제, 미니 프로젝트 계획 및 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>미니 프로젝트 주차 발제
<ul>
<li>미니 프로젝트 주차가 시작되었다. 백엔드 분들과 처음으로 과제를 하게 되는데 설레면서도 조금 걱정이 되었다. 이번 주차는 이전 주차에 했던 기능들을 복습하는 느낌이기에 추가 기능을 고려하기보다는 익숙해지는것에 초점을 두고 프로젝트를 기획하였다.</li>
</ul>
</li>
<li>미니 프로젝트 기획 및 설계
<ul>
<li><a href="https://www.notion.so/4-SA-05f4cb72bb1b4f6f8081fe4f29a60224" target="_blank" rel="noopener noreferer">SA 링크</a></li>
<li>주제 및 기능 정하기
<ul>
<li>주제는 면접 질문용 커뮤니티를 만들기로 하였고 핵심 기능은 게시판, 회원가입, 댓글 기능이다. 전에 했던 CRUD를 복습하는 의미에서 기능을 정하였고 나머지들은 시간이 남으면 추가 기능으로 구현하기로 하였다.</li>
</ul>
</li>
<li>와이어 프레임</li>
<li>API 설계
<ul>
<li>API 설계를 처음에 잘 해놓아야 백엔드와 프론트엔드 간의 소통이 원할하게 이뤄질 수 있다고 생각하여 꼼꼼히 설계를 해놓은것 같다. 조금 부족한 부분이 있겠지만 멘토님에게 피드백을 받을 예정이다.</li>
</ul>
</li>
<li>DB 스키마</li>
</ul>
</li>
<li>깃 pull request - 협업을 할때 도움이 되는 깃 pull request 기능에 대해 다른 분이 설명해주셔서 듣게 되었는데 이해는 되었으나 직접 해보지 않아 확실히 정리가 되지 않는 느낌이다. 이번에 프로젝트를 하면서 적용을 시켜보아야겠다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>미니 프로젝트 Main page 구현</li>
<li>프론트엔드 API 통신 방법 공부</li>
<li>프로그래머스 완전 탐색 2문제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220721]]></title>
    <link>https://dgd03146-github-io.vercel.app//220721</link>
    <pubDate>2022-07-21</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220721</guid>
    <description>
    <![CDATA[React 심화 주차 개인 과제 기능 구현 및 배포]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React 심화 주차 개인 과제 기능 구현 및 배포
<ul>
<li>게시글 작성, 수정, 삭제 기능 구현
<ul>
<li>파이어 스토어에서 데이터를 수정 삭제하는데 파이어스토어가 제공하는 메소드들의 동작 원리를 이해하는데 시간이 조금 걸렸다.</li>
<li>Redux에서 작성, 수정, 삭제 로직은 이제 확실히 익숙해지게 된 것 같다.</li>
</ul>
</li>
<li>개인 과제 배포 및 제출</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>미니 프로젝트 주차 발제</li>
<li>미니 프로젝트 기획 및 설계</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220720]]></title>
    <link>https://dgd03146-github-io.vercel.app//220720</link>
    <pubDate>2022-07-20</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220720</guid>
    <description>
    <![CDATA[React 심화 주차 개인 과제 기능 구현 및 배포]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React 심화 주차 개인 과제 기능 구현
<ul>
<li>회원가입 유효성 검사
<ul>
<li>회원가입을 할때 유효성 검사에서 조금 어려움을 겪었다. error 메세지가 Input 값이 바뀔때마다 나오게 하고 싶었는데 어떻게 구현을 해야할지 몰라서 error를 state로 주고 회원가입 버튼을 누를때 값이 나오게 하였다.</li>
<li>error 메세지를 p 태그로 만들었는데 error 메세지가 생성되면 height가 변하였는데 이것을 수정하려고 하는데 시간이 좀 걸렸다. 알고보니 CSS 속성인 visibility: hidden을 통해서 해주면 되는것이었다. 다음에는 꼭 적용하자.</li>
</ul>
</li>
<li>세션스토리지에 유저 정보 저장해서 새로고침해도 유저 정보가 남아있게 하기
<ul>
<li>로그인을 하면 로그인 한 user 정보가 Header에 가게 되는데 Redux에 저장된 user 정보는 새로고침을 하게 되면 사라지게 되어 이 값을 불러오는 방법을 고민하여서 멘토님에게 물어보았다. Redux에 있는 state는 새로고침을 하면 사라지게 된다. 그래서 session에 user를 저장해놓고 새로고침을 해도 session의 값은 남아있게 되기 때문에 session에 값이 있는지 없는지로 로그인 상태를 파악한다. 머릿속으로는 이해를 하였으나 아직 익숙치 않다. 계속해서 구현을 해보아야겠다.</li>
</ul>
</li>
<li>My page
<ul>
<li>본인이 올린 게시물만 볼 수 있도록 하기 위해서 My page를 만들었다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>React 심화 주차 개인 과제 CRUD 구현</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220719]]></title>
    <link>https://dgd03146-github-io.vercel.app//220719</link>
    <pubDate>2022-07-19</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220719</guid>
    <description>
    <![CDATA[깃헙 블로그 테마 변경, React 심화 주차 개인 과제 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>깃헙 블로그 테마 변경
<ul>
<li>Github 블로그가 테마도 이쁘고 Github과 연동되는 이유로 쓰고 있는데 이번에는 게시글이 업로드가 안되는 현상이 발생하였다.</li>
</ul>
</li>
<li>React 심화주차 개인과제 기능 구현 및 디자인
<ul>
<li>페이지 별 기본 Theme CSS로 구현</li>
<li>로그인 기능 구현</li>
<li>회원가입 기능 구현</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>React 심화 주차 개인 과제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220718]]></title>
    <link>https://dgd03146-github-io.vercel.app//220718</link>
    <pubDate>2022-07-18</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220718</guid>
    <description>
    <![CDATA[프로그래머스 완전탐색, 비동기 & Promise, Redux-thunk]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로그래머스 완전탐색 문제를 풀었다.
<ul>
<li>dfs 방법으로 푸는 문제를 처음 접하여서 문제를 풀지 못하였고 답을 이해하는데도 시간이 오래걸렸다. 콜백에 대한 개념이 부족한 것 같다.</li>
<li>dfs, bfs 개념을 이해하고 문제를 다시 풀어보아야겠다. 코딩 테스트의 중요성을 여실히 느끼는 지금 시간을 더 많이 투자해야할 것 같다.</li>
</ul>
</li>
<li>프론트엔드 개념 스터디를 하였다.
<ul>
<li>비동기, Promise에 대해 설명을 하였는데 조금 더 깊은 이해가 된 것 같다. 자주 나오는거보면 확실히 중요한 것 같다.</li>
<li>Redux-thunk의 역할에 대해서 공부하였다. redux-thunk 대신 그냥 api 호출을 하게 되면 어떻게 되는지에 대해서 알게 되었다. 조금 더 redux-thunk에 대한 깊은 이해를 한 것 같다.
[redux-thunk 블로그 링크]</li>
</ul>
</li>
<li>React 심화 주차 과제를 위한 로그인 인강을 들었다. 파이어베이스를 통한 로그인 기능을 구현해야하는데 이번에는 로그인 정보가 남아있어야해서 localstorage에 user 정보를 남기는 방식으로 구현해볼 생각이다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 완전탐색 2문제 및 못 푼 문제 복습</li>
<li>React 심화 주차 개인과제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220717]]></title>
    <link>https://dgd03146-github-io.vercel.app//220717</link>
    <pubDate>2022-07-17</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220717</guid>
    <description>
    <![CDATA[WIL 작성]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React 심화주차 개인 과제 프로젝트 렌더링 오류 해결
<ul>
<li>React 심화 주차 기본 기능을 다 완성하였다. 로그인이라는 추가적 기능을 구현하여서 User 정보에 따른 데이터를 받아오고 적용하는데 꽤 어려움을 겪었다.</li>
<li>추가적 기능인 무한 스크롤링을 나중에 시간이 있을때 적용해보아야겠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>4주차 WIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220716]]></title>
    <link>https://dgd03146-github-io.vercel.app//220716</link>
    <pubDate>2022-07-16</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220716</guid>
    <description>
    <![CDATA[React 숙련 주차 개인 과제 프로젝트]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React 심화주차 개인 과제 프로젝트 렌더링 오류 해결
<ul>
<li>React 심화 주차 기본 기능을 다 완성하였다. 로그인이라는 추가적 기능을 구현하여서 User 정보에 따른 데이터를 받아오고 적용하는데 꽤 어려움을 겪었다.</li>
<li>추가적 기능인 무한 스크롤링을 나중에 시간이 있을때 적용해보아야겠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>4주차 WIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220715]]></title>
    <link>https://dgd03146-github-io.vercel.app//220715</link>
    <pubDate>2022-07-15</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220715</guid>
    <description>
    <![CDATA[React 숙련 주차 개인 과제, React 심화주차 발제]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>React 심화 주차 발제
<ul>
<li>심화 주차가 시작되었다. 새로운 과제를 부여 받았다. 간단한 sns를 구현하는데 기능이 꽤나 많아 시간이 꽤나 오래걸릴 것 같았다. 아직 Redux toolkit으로 CRUD를 만드는 것이 익숙치 않다. 이번 과제를 통해 tool kit을 활용한 CRUD 만드는것에 익숙해져야겠다.</li>
</ul>
</li>
<li>React 숙련 주차 개인 과제
<ul>
<li>숙련 주차 개인과제 수정과 삭제 기능을 구현하였다.</li>
<li>CSS로 height 설정하는데 어려움을 겪었다. 어떤식으로 height를 설정하는지 멘토님께 여쭤봐야겠다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 완전 탐색 2문제</li>
<li>React 숙련주차 개인 과제 프로젝트 마무리</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220714]]></title>
    <link>https://dgd03146-github-io.vercel.app//220714</link>
    <pubDate>2022-07-14</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220714</guid>
    <description>
    <![CDATA[React 숙련 주차 개인 과제 프로젝트, Firestore]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>마감시한이 오늘까지라 개인 과제 프로젝트를 하루종일 하였다.
<ul>
<li>Firebase Store에서 User에 해당하는 data를 가져오는데 어려움을 겪었다. Redux toolkit에 대한 개념이 부족하여서 계속 찾아보면서 적용을 시켜나갔다.</li>
<li>toolkit에 비동기 처리를 쉽게 하는 createAsyncThunk의 사용법을 잘 몰라서 물어보기도 하였다. Redux를 처음 써보고 거기다 toolkit을 바로 써보니 확실히 프로젝트를 하면서 부족한게 여실히 드러났다. 다음 프로젝트에도 Redux toolkit을 이용하여 state 관리를 해보려고 한다. Redux toolkit에 익숙해지고 동작원리 코드 모듈을 확실하게 내 것으로 만들어야겠다.</li>
<li>firestore에 데이터 추가하는 기능만 만들고 수정, 삭제 기능을 하지 못하여서 조금 아쉽다. 나머지 기능도 어서 만들고 추가 요구사항인 무한 스크롤링도 구현을 해봐야겠다.</li>
<li>개인 과제를 마무리 못하고 제출한게 조금 아쉽다. 강의보다는 과제를 시작하면서 필요할 때만 강의를 보았으면 더 좋지 않았을까, CSS에 치중하기보다는 기능 구현을 먼저 했으면 하는 아쉬움이 남았다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>React 숙련주차 개인과제 프로젝트 마무리</li>
<li>React 스터디 개념 블로그에 정리하기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220713]]></title>
    <link>https://dgd03146-github-io.vercel.app//220713</link>
    <pubDate>2022-07-13</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220713</guid>
    <description>
    <![CDATA[Redux toolkit, 동기 & 비동기, Suspense in React]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>Redux에 대해 복습을 하였고 Redux toolkit을 사용하는 방법을 간단한 코드를 통해서 실습해보았다.
<ul>
<li>Redux toolkit을 쓰다보니 확실히 bolier plate가 없어져서 간단하여 손쉽게 Redux 모듈을 작성할 수 있었다. Redux toolkit 내에는 thunk가 자체적으로 있는데 아직 thunk의 동작원리를 정확하게 모르겠다. 코드를 짜보면서 thunk를 왜 사용하고 필요한지에 대해 직접 느껴보고 동작원리에 대해서도 한번 찾아봐야할 것 같다.</li>
</ul>
</li>
<li>리액트 팀 과제 스터디를 하였다.
<ul>
<li>자바 스크립트 동기와 비동기에 대해서 토의를 하였다. 아직 동기, 비동기에 대한 개념이 많이 헷갈리는걸 알게 되었다.</li>
<li>Suspense라는 개념을 새로 배웠다. 비동기 작업에서 유용하게 쓰일것 같아 나중에 한번 사용해봐야겠다.</li>
<li>context API와 Redux의 차이점에 대해 토의를 하였다. 둘 다 장단점이 명확하므로 적절한 상황에 맞게 올바른 것을 쓰면 될 것 같다.</li>
</ul>
</li>
<li>개인 과제 프로젝트의 page component들을 다 구성하였다. CSS를 이쁘게 하고 싶어서 시간이 좀 걸렸다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>개인 과제 프로젝트 마무리</li>
<li>알고리즘 완전 탐색 공부</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220712]]></title>
    <link>https://dgd03146-github-io.vercel.app//220712</link>
    <pubDate>2022-07-12</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220712</guid>
    <description>
    <![CDATA[Github issue, Redux]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>Github issue로 프로젝트 관리하는 방법을 공부하였다.
<ul>
<li>Github issue 템플릿을 만들고 프로젝트 진행 중 feature, bug를 정리하면서 코딩을 하였다. 나중에 trouble shooting을 상기시킬때도 유용할 것 같아서 지금부터 습관으로 만들어야겠다.</li>
</ul>
</li>
<li>Redux 동작원리에 대해서 복습을 하고 Redux Toolkit 사용하는 방법을 배웠다.
<ul>
<li>Redux의 동작 원리를 스스로 설명할 수 있어야한다. 흐름을 파악하면 이해가 쉽다.</li>
<li>모듈 파일을 많이 만드는 연습을 하자.</li>
</ul>
</li>
<li>개인 과제 프로젝트 로그인, 회원가입을 파이어스토어를 통해 구현하였다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>Udemy Redux part 인강</li>
<li>개인 과제 프로젝트</li>
<li>리액트 개념 스터디</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220711]]></title>
    <link>https://dgd03146-github-io.vercel.app//220711</link>
    <pubDate>2022-07-11</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220711</guid>
    <description>
    <![CDATA[프로그래머스 정렬, React 심화 인강 2주차]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>프로그래머스 정렬 1문제를 풀었다.
<ul>
<li>문제를 풀지 못하여서 다른 사람의 풀이를 보았는데 발상의 전환이었다. 문제를 확실히 많이 풀어봐야 다양한 방식으로 생각할 수 있을것 같다.</li>
</ul>
</li>
<li>매니저님께 궁금한 것 질문을 하는 시간을 가졌다.
<ul>
<li>리액트를 실무에서 어떻게 사용하는지에 대한 궁금증을 해결할 수 있었다. 어서 빨리 과제를 하면서 궁금한 것을 물어보고 싶다. 내일부터 과제를 바로 시작하자. 확실한 건 누군가에게 개념을 설명할 수 있을 정도가 되어야 한다. 갈길이 멀지만 계속해서 반복 학습을 하자.</li>
</ul>
</li>
<li>리액트 스터디를 하였다.
<ul>
<li>옵셔널 체이닝과 리덕스에서 state가 변하였을때 동작 원리를 토의하면서 더 깊게 알게 되었다.</li>
</ul>
</li>
<li>항해99 리액트 심화 인강 2주차까지 들었다.
<ul>
<li>자바스크립트 기본 문법부터 React 기초까지 배웠는데 특히 비동기,동기 파트와 Redux 부분이 아직 완전히 와닿지는 않는다. 코드를 직접 많이 안 쳐봐서 그런것 같다. Redux는 특히 React에서 상태 관리를 할 때 중요하므로 모듈을 안 보고 칠 수 있도록 익히자. 동작원리도 다른 사람에게 설명할 수 있을 정도로 공부하자.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>항해99 리액트 심화 3주차 인강 듣기</li>
<li>프로그래머스 정렬 1문제 풀기</li>
<li>리액트 개인 과제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220710]]></title>
    <link>https://dgd03146-github-io.vercel.app//220710</link>
    <pubDate>2022-07-10</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220710</guid>
    <description>
    <![CDATA[React 입문 주차 개인 과제 추가 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>WIL을 작성하며 회고를 하였다.
<ul>
<li>DOM</li>
<li>Severless</li>
</ul>
</li>
<li>리액트 심화반 인강 3주차 복습을 하였다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 정렬 1문제</li>
<li>리액트 스터디</li>
<li>리액트 심화 인강 2주차</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220709]]></title>
    <link>https://dgd03146-github-io.vercel.app//220709</link>
    <pubDate>2022-07-09</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220709</guid>
    <description>
    <![CDATA[React 입문 주차 개인 과제 추가 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>리액트 심화반 3주차 파이어베이스 part 인강을 들었다.</li>
<li>MPA, SPA 개념에 대해 공부하였다.</li>
<li>프로그래머스 힙 한 문제를 풀었다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>리액트 심화반 3주차 인강 복습</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220708]]></title>
    <link>https://dgd03146-github-io.vercel.app//220708</link>
    <pubDate>2022-07-08</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220708</guid>
    <description>
    <![CDATA[블로그 정리, Heap 자료구조]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>블로그 정리를 하였다.</li>
<li>바벨로 리액트 앱을 만드는 것을 하였다.</li>
<li>Heap 자료 구조 강의를 들었다.</li>
<li>React SA를 제출하였다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 Heap 한문제</li>
<li>React 심화반 3주차 인강 듣기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220707]]></title>
    <link>https://dgd03146-github-io.vercel.app//220707</link>
    <pubDate>2022-07-07</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220707</guid>
    <description>
    <![CDATA[React 입문 주차 개인 과제 추가 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 리액트 개인 과제 추가적 기능을 추가하여 배포하였다.
<ul>
<li>오늘 날짜별로 정렬하는 기능 추가
<ul>
<li>객체로 된 배열의 데이터를 날짜별로 정렬하는데 조금 어려움을 겪었다. 알고리즘을 생각하지 못하였는데 slice 함수로 쉽게 해결할 수 있었다.</li>
</ul>
</li>
<li>키보드 숫자로 평점 입력하기 추가</li>
<li>개인 과제를 하면서 느낀점은 아직 CSS랑 state 다루기, 최적화가 아직 부족하단것을 알게 되었다. 공부를 하면서 계속 보안해나가자.</li>
</ul>
</li>
<li>블로그를 이전하였다. 깃헙 블로그가 계속 CSS가 적용이 안 되어서 다른 깃헙 블로그로 이전하였다. 게시물들을 차근차근 옮겨야겠다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 리액트 기초반 강의 4주차, 5주차 듣기</li>
<li>[항해99] 리액트 SA 제출</li>
<li>프로그래머스 스택 오늘 못 푼 문제, 힙 1문제 풀기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220706]]></title>
    <link>https://dgd03146-github-io.vercel.app//220706</link>
    <pubDate>2022-07-06</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220706</guid>
    <description>
    <![CDATA[React 입문 주차 개인 과제 기능 구현]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 리액트 개인과제 기능을 다 구현하였다.
<ul>
<li>CSS에서 반응형으로 구현을 하려다가 애를 먹었다. 반응형에 관해서 따로 정리를 해서 공부를 해야겠다.</li>
<li>강의에서 배웠던 내용이고 Redux를 쓰지 않아도 되어서 쉽게 구현할 수 있었다.</li>
</ul>
</li>
<li>리액트 개념에 관하여 스터디를 하였다.
<ul>
<li>리액트에서 렌더링 향상을 위한 방법에 관해서 얘기를 깊게 나누었는데 내가 알고 있던 것 보다 더 많이 있었다. 비슷한게 많아서 아직 많이 헷갈린다. 여러가지의 최적화 방법 중 어떤 것이 적재적소에 쓰일 수 있을지 확실히 인지하고 있어야하고 써먹어야한다.</li>
</ul>
</li>
<li>항해99를 수료한 현직 개발자의 특강을 들었다.
<ul>
<li>알고리즘을 열심히 해야한다. 기능을 구현할 때 트러블 슈팅 같은것을 항상 정리해놓아라. 목표를 높게 잡아야 한다 등 특히 코딩 테스트 공부 관련해서 얘기해주신 점이 많이 도움이 된 것 같다. 그리고 항해99를 하면서 생활 루틴, 마음가짐 등에 대해서 얘기 해주어서 정말 보람찬 특강이었다.</li>
<li>면접 후기 및 준비했던 과정을 들으면서 정말 열심히 해야겠구나. 나는 아직 부족한게 너무 많구나 하고 생각이 들었다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 리액트 기초반 강의 4주차 듣기</li>
<li>[항해99] 리액트 개인과제 배포 및 추가 기능 구현하기</li>
<li>프로그래머스 스택 1문제 풀</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220705]]></title>
    <link>https://dgd03146-github-io.vercel.app//220705</link>
    <pubDate>2022-07-05</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220705</guid>
    <description>
    <![CDATA[React 기초반 2주차 강의, ref를 쓰는 이유, SPA & MPA]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 리액트 기초반 3주차 강의를 들었다.
<ul>
<li>React-router로 주소에 따라 다른 페이지를 보여주는 방법을 배웠다.
<ul>
<li>react-router-dom 이 강의에서는 ver5여서 ver6와는 조금 달라서 문법을 이해하는데 시간이 더 걸렸다. ver5와 ver6의 차이점을 블로그에 정리를 해야겠다. 비교하면서 사용하다보니 ver6가 확실히 더 편리한것 같다.</li>
</ul>
</li>
<li>Redux로 상태관리를 해보고 상태관리 흐름을 이해하였다.
<ul>
<li>Redux를 왜 사용하는지에 대해서 알았고 props drilling을 하지 않아도 되서 상태관리를 편하게 할 수 있다는 것을 깨달았다. Redux 모듈에 아직 익숙치 않아서 코드를 많이 스스로 짜봐야겠다.</li>
</ul>
</li>
</ul>
</li>
<li>리액트 스터디를 통해 ref를 쓰는 이유, SPA 방식과 MPA 방식에 대해 토의하였다.
<ul>
<li><a href="https://dgd03146.github.io/react/20220705-why-use-ref/" target="_blank" rel="noopener noreferer">ref를 쓰는 이유</a></li>
<li>SPA 방식과 MPA 방식</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 리액트 개인 과제 기능 구현 완료하기</li>
<li>프로그래머스 스택 한문제 풀기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220704]]></title>
    <link>https://dgd03146-github-io.vercel.app//220704</link>
    <pubDate>2022-07-04</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220704</guid>
    <description>
    <![CDATA[React 기초반 2주차 강의, 라이프사이클]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 리액트 기초 강의 2주차를 들었다.
<ul>
<li>라이프 사이클에 대해 이해를 하였다. 컴포넌트의 라이프 사이클(= 컴포넌트 생명주기)은 정말 중요한 개념이다. <strong>컴포넌트가 렌더링을 준비하는 순간부터, 페이지에서 사라질 때까지</strong>가 라이프 사이클이라고 한다. 어떻게 동작을 하는지 제대로 이해를 하고 있어야한다.</li>
</ul>
</li>
<li>[프로그래머스] 해쉬 한 문제를 풀었다.
<ul>
<li>해쉬에 대한 개념이 없이 문제를 푸니까 접근을 하기가 어려웠다. Map 함수에 대해서 공부를 하였고 Object와 Map의 차이점에 대해서도 알게 되었다. 아직 어떤 식으로 접근을 해야할지 감이 잡히지 않는다. 계속해서 알고리즘 문제를 풀어봐야할 것 같다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 리액트 기초반 강의 3주차 듣기</li>
<li>리액트 스터디 개념 공부하기</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220703]]></title>
    <link>https://dgd03146-github-io.vercel.app//220703</link>
    <pubDate>2022-07-03</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220703</guid>
    <description>
    <![CDATA[WIL 작성, 자바스크립트 ES5/ES6]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>WIL 작성
<ul>
<li>한 주를 회고하면서 느낀점은 시간이 엄청 빨리 간다. 더 열심히 하며 시간을 보낼 수 있지 않았을까 하는 아쉬움이 들었다.</li>
</ul>
</li>
<li>ES5/ES6 문법 차이를 공부하면서 자바스크립트 복습을 하였다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 해쉬 풀기</li>
<li>리액트 기초 강의</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 2주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220703-wil</link>
    <pubDate>2022-07-03</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220703-wil</guid>
    <description>
    <![CDATA[2주차 회고 - 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="알고리즘-스터디" class="heading">알고리즘 스터디</h2>
<h3 id="2주차-과제">2주차 과제</h3>
<p>평소에 알고리즘 공부를 워낙 안했어서 문제를 푸는것에 두려움이 가득했다. 걷기반과 달리기반으로 반을 나누었는데 나는 달리기반을 신청하였다.</p>
<p>달리기반은 총 38문제를 푸는것이었고 난이도가 중상, 상인 문제까지 푸는것이었다. 팀원들은 다 전공자여서 내가 가장 부족하지 않을까 하는 걱정도 앞섰다.</p>
<p><img src="../../assets/images/posts_img/%ED%95%AD%ED%95%B499-wil-2/%ED%95%AD%ED%95%B499-wil-2.png" alt="Untitled"></p>
<h3 id="스터디-회고">스터디 회고</h3>
<p>문제들은 프로그래머스 레벨 1정도 되었는데 문제를 풀면서 그만큼 알고리즘 지식이 많이 부족하다는것을 알게 되었다.</p>
<p>그래도 팀원들과 함께 문제 풀이를 공유하면서 꾸준히 풀다보니 알고리즘 문제에 대한 두려움이 사라졌다. 팀원들과 스터디를 하면서 많이 배우게 된것 같다. 서로 풀이를 공유하다보니 사람마다 생각하는 방법이 다르고 풀이가 달라서 여러가지의 문제 접근 방식을 배우게 된 것 같다.</p>
<p>아직 부족한 게 많다. 외워야할 메소드도 많고 헷갈리는게 많다. 멘토님께 알고리즘 관련 질문을 했었는데 누구나 처음부터 잘하는 사람은 없다고 하였다.</p>
<p>중요한 것은 꾸준히 계속 풀고 복습하고 외우는 것이다. 문제를 많이 접하면서 개념과 접근방식을 이겨나가자.</p>
<h1 id="이번주의-핵심-키워드" class="heading">이번주의 핵심 키워드</h1>
<h2 id="javascript의-es란" class="heading">JavaScript의 ES란?</h2>
<h3 id="es란">ES란?</h3>
<p>ES란 ECMA Script의 약자로써 자바스크립트의 표준 규격을 의미한다. ECMAScript 는 Ecma 인터내셔널의 ECMA-262 기술 규격에 정의된 표준화된 스크립트 프로그래밍 언어이다. 자바스크립트를 표준화하기 위해서 만들어졌으며 꼭 자바스크립트가 아니더라도 어도비 플래시를 사용하는 소프트웨어에서 사용하는 액션스크립트, MS 사의 인터넷 익스플로러에 쓰이는 J스크립트 등 다른 구현체들 역시 포함하고 있다.</p>
<h3 id="등장배경">등장배경</h3>
<p>자바스크립트는 1990년대 Netscape 회사의 Brendan Eich 라는 사람에 의해 최초 개발되었다. 자바스크립트가 성공하자 MS에서 Jscript라는 언어를 개발해 IE에 탑재하였는데, 이 두 스크립트가 너무 제각각이라, 표준이 필요하게 되었다. 표준을 위해 자바스크립트를 ECMA(European Computer Manufactures Association)라는 정보와 통신시스템의 비영리 표준 기구에 제출하였고 표준에 대한 작업을 ECMA-262란 이름으로 1996년 11월에 시작해 1997년 6월에 채택되었고 이러한 배경으로 ES가 등장하게 되었다.</p>
<br/>
<h2 id="es5es6-문법-차이" class="heading">ES5/ES6 문법 차이</h2>
<h3 id="let-const-키워드-추가">let, const 키워드 추가</h3>
<p>ES5에선 <code>var</code> 밖에 존재하지 않았다. <code>var</code> 는 변수를 선언할 때 사용되는 키워드로,재할당과 재선언에 굉장히 자유로웠다.</p>
<p>ES6 부터 let과 const가 추가가 되었는데 <code>let</code>은 한번 선언된 변수에 동일한 이름으로 선언할 수 없다. 값은 재할당 할 수 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</span><span class="code-line">x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
</span><span class="code-line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// Identifier 'x' has already been declared</span>
</span></code></pre>
<p><code>const</code>는 한번 초기화된 변수에 재할당/재선언을 할 수 없다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10;</span>
</span><span class="code-line">x <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>
</span></code></pre>
<p><code>let</code>, <code>const</code>는 블록 스코프 또는 Function 스코프 내부에 선언되면 해당 스코프 밖에서 안에 있는 변수를 참조할 수 없다. 중괄호로 묶인 부분 내부에 선언된 <code>let</code>, <code>const</code>를 중괄호 외부에서 참조할 수 없다. 밖에서 안에 있는 <code>const</code> , <code>let</code> 은 참조할 수는 있다.</p>
<p>반면에 <code>var</code>는 Function 스코프는 내부에 선언된 <code>var</code>를 외부에서 참조할 수 없지만</p>
<p>블록 스코프에선 내부에 선언되어 있어도 외부에서 참조 가능하다.</p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d195485c-cf81-4970-9c37-3a8c21dac56b/HYO9xE2.png" alt="HYO9xE2.png"></p>
<br/>
<h2 id="모듈" class="heading">모듈</h2>
<p>모듈이란, 재사용하기 위한 코드 조각을 뜻하며, 세부사항은 캡슐화시키고, API 부분만 외부에 노출시킨 코드들이다.</p>
<p>ES5 에선 <code>require</code>  를 통해 모듈화를 할 수 있었다.</p>
<p>ES6 부터는 <code>import</code> /<code>export</code>  로 모듈을 관리할 수 있다. 클래스와 같은 모듈이 로딩될 때, <code>import</code>
와 <code>export</code> 키워드로 사용수 있다.</p>
<p><strong>하나의 모듈만 공유할 때</strong></p>
<p>로드 모듈import 'import to loadname' from '파일 경로’</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">import</span> to loadname <span class="token keyword module">from</span> <span class="token string">'파일 경로'</span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token string">'module'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Carousel</span></span> <span class="token keyword module">from</span> <span class="token string">'./carousel'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> carousel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carousel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p><strong>여러 모듈을 사용할 때</strong></p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'파일 경로'</span>
</span></code></pre>
<br/>
<h2 id="화살표-함수" class="heading">화살표 함수</h2>
<p>기존의 선언 방식</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>ES6 함수의 선언 방식</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">let</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>화살표 선언 방식을 통해 간결해진것을 확인할 수 있다.</p>
<br/>
<h2 id="템플릿-리터럴" class="heading">템플릿 리터럴</h2>
<p>ES6부터 등장한 백틱으로 문자열을 감싸 표현하는 기능이다.</p>
<p>템플릿 리터럴이란 작은 따옴표나 큰 따옴표 대신 백틱 ````으로 문자열을 감싸 표현하는 기능을 말한다.</p>
<p>템플릿 리터럴을 사용하면 플레이스 홀더 <code>${variable}</code> 를 사용하여 백틱 내부에 문자열과 함께 표현식을 넣을 수 있다.</p>
<p>ES5</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'이름'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'저의 이름은'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'이고, 나이는 '</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'입니다.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>ES6</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'이름'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">저의 이름은 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">이고, 나이는 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">살 입니다.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h2 id="default-parameter" class="heading">Default parameter</h2>
<p>인자가 없거나 'undefined'인 경우에 들어갈 기본값을 설정해 놓아야 한다.</p>
<p>ES6에서는 <strong>기본 매개 변수</strong>(Default Parameters)를 제공하고, 매개변수가 없을 경우 지정한 기본값을 인자로 전달한다.</p>
<p>ES5</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">var</span> name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'이름'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> name<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>ES6</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">let</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'이름'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> name<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<h2 id="비구조화-할당" class="heading">비구조화 할당</h2>
<p>비구조화 할당, 배열이나 객체의 요소를 해체하여 별개의 변수로 추출할 수 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token constant">ES5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">  first <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">,</span>
</span><span class="code-line">  second <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token property-access">second</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token constant">ES6</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token punctuation">{</span> first<span class="token punctuation">,</span> second <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token spread operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token number">10</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token number">20</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h2 id="promises" class="heading">Promises</h2>
<p>비동기를 위한 객체, 어떤 일의 진행 상태를 나타내는 객체로 <strong>상태</strong>와 <strong>값</strong>이라는 속성을 갖고 있다. resolve, reject를 호출하여 진행 상태를 결정할 수 있다. promise의 값은 resolve, reject를 호출할 때 넘긴 인자에 의해 결정된다. then(), catch()는 일의 진행 상태를 나타내는 객체다 promise가 fullfilled일 때 then()에 등록한 함수를 실행하고, promise가 rejected일 때는 아무것도 하지 않는다.</p>
<p>⑴ 동기</p>
<p>요청과 응답이 동시에 일어난다 설계가 간단하고 직관적이지만 응답이 있을 때까지 대기해야 한다.</p>
<p>ex) 은행 계좌이체</p>
<p>⑵ 비동기</p>
<p>요청과 응답이 동시에 일어나지 않는다 응답이 오기 전까지 다른 요청이나 작업이 가능하다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token constant">ES5</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Yay!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token constant">ES6</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">wait1000</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token function">wait1000</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'WOW!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">wait1000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'WOWWOW!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h2 id="클래스" class="heading">클래스</h2>
<p>ES5</p>
<p><strong>ES5</strong>에선 <code>class</code> 라는 키워드는 없었지만 프로토타입을 통해 실현 가능했다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">Add</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">=</span> arg1<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">=</span> arg2<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token class-name">Add</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">calc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token string">'+'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>ES6</p>
<p>ES6부터 <code>class</code> 키워드가 사용 가능하다. ES6에서는 <code>class</code> 키워드를 사용해서 선언할 수 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">=</span> arg1<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">=</span> arg2<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token string">'+'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<h3 id="클래스-상속">클래스 상속</h3>
<p>클래스의 상속과 오버라이딩은 <code>super</code>를 사용해서 수행할 수 있다.</p>
<p>ES5</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line">copy javascriptvar <span class="token function-variable function"><span class="token maybe-class-name">AddSquare</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token maybe-class-name">Add</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token class-name">AddSquare</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token class-name">Add</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token class-name">AddSquare</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">calc</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line"><span class="token comment">// 메소드는 생략될 수 없습니다.</span>
</span><span class="code-line">    <span class="token class-name">Add</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">calcSquare</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">pow</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">pow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">+</span> <span class="token string">")^2="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">pow</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">var</span> numSquare <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddSquare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>numSquare<span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 + 8 = 13console.log(numSquare.calcSquare());// (5 + 8) ^ 2 =169</span>
</span></code></pre>
<p>ES6</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line">copy scalaclass <span class="token maybe-class-name">AddSquare</span> <span class="token keyword">extends</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token function">calcSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">pow</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">pow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg1</span> <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">arg2</span> <span class="token operator">+</span> <span class="token string">") ^ 2 ="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">pow</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">var</span> numSquare <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddSquare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>numSquare<span class="token punctuation">.</span><span class="token method function property-access">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 + 8 = 13</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>numSquare<span class="token punctuation">.</span><span class="token method function property-access">calcSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (5 + 8) ^ 2 = 169</span>
</span></code></pre>
<br/>
<h2 id="this-사용의-변화" class="heading">this 사용의 변화</h2>
<p>ES5</p>
<p>ES5같은 경우 객체내에있는 메소드를 실행시 메소드의 this는 메소드가 선언된 해당 객체를 가리킨다. 하지만 객체안에서 선언된 함수의 this는 해당 객체가 아닌 window를 바라보고있기 떄문에 함수 안에서 <a href="https://juniordev-team.tistory.com/this.name" target="_blank" rel="noopener noreferer">this.name</a> , <a href="https://juniordev-team.tistory.com/this.age%EB%A5%BC" target="_blank" rel="noopener noreferer">this.age를</a> 하여도 아무 값이 나오지 않는다. 이러한 경우 해결방안으로 는 <a href="https://juniordev-team.tistory.com/innerInfo.call(this)%EB%A5%BC" target="_blank" rel="noopener noreferer">innerInfo.call(this)를</a> 통해 this를 바인딩 시켜주었거나 this를 해당 변수에 담아서 var self = this 와 같은 방식으로 접근하여 사용하였다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">var</span> thisTest <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'임거정'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">info</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">function</span> <span class="token function">innerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">innerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 실행결과</span>
</span><span class="code-line"><span class="token comment">// {name: "임거정", age: 27, info: ƒ}</span>
</span><span class="code-line"><span class="token comment">// 임거정 27</span>
</span><span class="code-line"><span class="token comment">// Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}</span>
</span><span class="code-line"><span class="token comment">// ":undefined"</span>
</span></code></pre>
<p>ES6
ES6에서의 this는 자신을 둘러싸고 있는 this를 바라보기때문에  따로 바인딩이나 변수에 담을 필요없이 사용 가능하다 .또한 ES5의 info : function(){} 처럼 사용하지 않고 바로 info key에게 함수를 선언하여 사용할 수있도록 되어 좀더 간결하게 짤수있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">let</span> thisTest <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'임거정'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token function-variable function">innerInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">innerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<br/>
<h2 id="앞으로의-계획" class="heading">앞으로의 계획</h2>
<ul>
<li>문제를 풀때 시간이 많이 걸렸던 문제들이나 못 풀어서 솔루션을 본 문제들은 시간을 투자해서 다시 꾸준히 풀어봐야겠다.</li>
<li>알고리즘 및 자료구조 지식을 길러야겠다. 유튜브나 인강을 통해서 먼저 개념을 익히고 알고리즘 문제 풀이에 접근하면 다양한 방식으로 문제를 풀고 쉽게 풀 수 있을것 같다.</li>
<li>알고리즘 스터디를 계속 진행하기로 하였다. 프로그래머스로 다양한 유형의 문제를 풀어보면서 코딩테스트까지 준비할 예정이다. 매일 꾸준히 한문제씩 풀고 스터디하기로 하였다. 많은 도움이 될 것 같다.</li>
<li>Git을 확실하게 정리하고 넘어가야겠다. 추천된 인터넷 강의들을 보면서 정리를 하고 실전에서 써보자. 협업을 할때 Git을 모르면 골치가 아파지기에 미리 미리 익혀놓자.</li>
<li>주특기 주차를 맞이하게 된다. 나는 프론트엔드를 공부하고 싶기에 React를 선택하였다. React를 조금 공부한 적이 있는데 이번 기회를 통해서 완전히 내 것으로 만들고 싶다. 특히 Redux를 통한 state의 전역관리 방법에 대해 많이 배우고 싶다.</li>
</ul>
<p><strong>Reference</strong></p>
<p><a href="https://usefultoknow.tistory.com/entry/ECMA-SCript%EB%9E%80-ES%EB%9E%80" target="_blank" rel="noopener noreferer">https://usefultoknow.tistory.com/entry/ECMA-SCript란-ES란</a></p>
<p><a href="https://hbsowo58.tistory.com/407" target="_blank" rel="noopener noreferer">https://hbsowo58.tistory.com/407</a></p>
<p><a href="https://juniordev-team.tistory.com/6" target="_blank" rel="noopener noreferer">https://juniordev-team.tistory.com/6</a></p>
<p><a href="https://y-chyachya.tistory.com/49" target="_blank" rel="noopener noreferer">https://y-chyachya.tistory.com/49</a></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220702]]></title>
    <link>https://dgd03146-github-io.vercel.app//220702</link>
    <pubDate>2022-07-02</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220702</guid>
    <description>
    <![CDATA[리액트 스터디, 프로그래머스 Hash]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>리액트 개념 스터디를 하였다.
<ul>
<li>조별로 팀 과제가 주어졌는데 프론트엔드 개념에 대한 질문을 답하는것이었다. 우리조는 각각 문제를 맡아서 발표하는것으로 정하였다. 아무래도 발표를 하게 되면 조금 더 기억에 남게 되고 남에게 설명해주어야하니까 깊이 있게 공부를 할 수 있을것 같았다.</li>
<li>자바스크립트에서 유사배열과 배열의 차이
<ul>
<li>유사배열이란 단어를 처음 들어보았는데 배열 같은 객체이다. 배열처럼 관리하고싶지만 배열의 prototype을 상속받고 싶지 않을때, 즉 메서드를 사용하지 못하게하여 사용자 실수를 방지하고 싶을때 사용하는것이 핵심이다.</li>
</ul>
</li>
<li>리액트에서 컴포넌트 라이프 사이클 흐름
<img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/914055b1-be7f-4bcc-bbcd-a1000a713fa1/Untitled.png" alt="Untitled">
이 이미지로 요약을 할 수 있다. <strong>컴포넌트가 렌더링을 준비하는 순간부터, 페이지에서 사라질 때까지</strong>가 라이프 사이클이다. 라이프 사이클은 정말 중요한 개념이다. 나중에 정리해서 제대로 익힐수 있도록 하자.</li>
</ul>
</li>
<li>알고리즘 Hash 문제를 풀었다.
<ul>
<li>확실히 프로그래머스 레벨2라서 어려웠다. 아직도 가야할 길이 많다. 꾸준히 계속 알고리즘 문제를 풀자.</li>
</ul>
</li>
<li>리액트 강의를 다시 복습하면서 기초를 다지는데 내가 알고 있다고 생각했지만 몰랐던 개념이 꽤 있었다. 강의를 다 들으면서 스스로 만들어보고 해야 내 것이 될것 같다. 능동적으로 공부하자!</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>리액트 기초 강의</li>
<li>한입으로 잘라먹는 React 실전</li>
<li>WIL 작성</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220701]]></title>
    <link>https://dgd03146-github-io.vercel.app//220701</link>
    <pubDate>2022-07-01</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220701</guid>
    <description>
    <![CDATA[한입으로 잘라먹는 React 기본 강의]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>한입크기로 잘라먹는 React 기본 강의를 들었다.
<ul>
<li>아직 CRUD를 작성하는데 익숙치 않은것 같다. <code>onChange</code>를 통해 <code>Input</code> 태그의 value를 <code>state</code>로 설정하는 방법을 배웠다. <code>Input</code> 태그에서 언제 <code>onChange</code>와 <code>ref</code>를 사용해야 하는지에 대해 감이 잡혔다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>프로그래머스 고득점 Kit Hash 문제</li>
<li>리액트 기초반 인강 1 ~ 3주차 듣기</li>
<li>프로그래머스 고득점 Kit Hash 문제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220630]]></title>
    <link>https://dgd03146-github-io.vercel.app//220630</link>
    <pubDate>2022-06-30</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220630</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>알고리즘 시험을 쳤다.
<ul>
<li>문제가 생각보다 쉬워서 금방 풀었다.</li>
</ul>
</li>
<li>알고리즘 달리기반 36번을 풀었다.
<ul>
<li>문제를 너무 오랫동안 고민해서 겨우 풀었다. 문제를 확실히 많이 풀어야겠다는 생각을 든다. 그래도 문제를 풀때는 집중해서 하게 되니 시간이 잘 가는것 같다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>한입크기로 잘라먹는 React React 기본 강의 듣기</li>
<li>프로그래머스 고득점 Kit Hash 문제</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220629]]></title>
    <link>https://dgd03146-github-io.vercel.app//220629</link>
    <pubDate>2022-06-29</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220629</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>알고리즘 달리기반 프로그래머스 33 ~ 35번 문제룰 풀었다.
<ul>
<li>프로그래머스 레벨1을 푸는데도 조금 시간이 걸린다. 더 열심히 해야하는 생각 밖에 없다.멘토님께 물어봐도 누구나 처음부터 잘하는 사람은 없으니까 계속 꾸준히 하면 실력이 는다라고 자신감을 심어주셨다. 알고리즘 주차가 끝나도 꾸준히 알고리즘을 계속 풀어서 실력을 높이자. 중요한건 꾸준함이다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>알고리즘 달리기반 36 ~ 37번 문제 풀기</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220628]]></title>
    <link>https://dgd03146-github-io.vercel.app//220628</link>
    <pubDate>2022-06-28</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220628</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 알고리즘 프로그래머스 25 ~ 28</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>알고리즘 모의고사를 쳤는데 많이 어려울까봐 걱정했는데 생각보다 쉬워서 다행이었다.</li>
<li>알고리즘 달리기반 29번 ~ 32번 문제를 풀었다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>알고리즘 달리기반 33 ~ 36번 문제 풀기</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220627]]></title>
    <link>https://dgd03146-github-io.vercel.app//220627</link>
    <pubDate>2022-06-27</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220627</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 알고리즘 프로그래머스 25 ~ 28</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>하루종일 알고리즘 문제만 풀었다. 전에 못 풀었던 문제도 다시 풀고 오늘 분량만큼의 알고리즘 문제도 풀었다. 알고리즘 문제를 풀면서 느낀건 효율성과 정확성이 중요한것 같다. 코드를 짤때도 런타임을 고려하면서 코드를 짜야 효율적인 코드인것 같다. 시간 복잡도, 알고리즘 유형에 대한 공부의 필요성을 느꼈다. 그러한 것들을 알아야 문제의 접근 방법 및 코드 작성이 간결하고 쉬워질것 같다. 공부해야할게 많은데 알고리즘에 흥미가 있고 잘해지고 싶은 마음이 있기에 열심히 하면 결과는 저절로 따라오게 된다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 알고리즘 프로그래머스 29 ~ 32</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220626]]></title>
    <link>https://dgd03146-github-io.vercel.app//220626</link>
    <pubDate>2022-06-26</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220626</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>WIL 작성 및 제출</li>
<li>[항해99] 알고리즘 프로그래머스 17 ~ 24</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>오늘은 따로 스터디가 없다. 그래서 자율적으로 문제만 풀기만 하면된다. 확실히 난이도가 올라갔다. 2문제 정도 못풀어서 풀이를 보았는데 풀이를 보면 정말 잘 푸는 사람이 많다고 느꼈다. 그리고 나는 이렇게 밖에 생각을 못했는데 저렇게도 생각을 할 수 있구나 하는 새로운 발견을 하게 된다. 풀이를 보아도 이해를 하고 다시 코드를 작성해보면서 내것으로 만드는게 중요하다. 그래서 38번까지 다 풀고 나서 문제를 시간을 정해놓고 다시 한번 풀어볼 생각이다. 정규표현식, 메소드 사용법을 정확히 알고 있어야 겠다. 그래도 알고리즘 문제 푸는것에 흥미가 생겼다. 더 잘해지고 싶은 마음이 많이 생긴다. 알고리즘 주차가 끝나도 꾸준히 계속 풀자!</li>
<li>1주차를 회고하면서 JWT와 API를 키워드로 해서 Week I learned 를 제출하는 과제를 부여받았는데 다시 1주차 미니프로젝트를 회고해볼 수 있었고 생각을 정리할 수 있었다. TIL만 써왔는데 WIL을 쓰면서 한주를 다시 회고하고 요약할 수 있어서 WIL도 써볼 생각이다. 블로그에 써야할게 많지만 매일 회고하면서 하루를 복습하게 되어서 좋은것 같아서 계속 쓸 예정이다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>항해99] 알고리즘 프로그래머스 25 ~ 28 문제 풀기</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 항해99 1주차 WIL]]></title>
    <link>https://dgd03146-github-io.vercel.app//220626-wil</link>
    <pubDate>2022-06-26</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220626-wil</guid>
    <description>
    <![CDATA[1주차 회고 - 미니프로젝트]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="../../assets/images/posts_img/%ED%95%AD%ED%95%B499-wil-1/%ED%95%AD%ED%95%B499-wil-1-1.png" alt="image"></p>
<p><a href="https://www.youtube.com/watch?v=FhEKosjdt3M&#x26;t=2s" target="_blank" rel="noopener noreferer">백수탈출 프로젝트 시연연상</a></p>
<h2 id="팀원-배정" class="heading">팀원 배정</h2>
<p>팀원 배정을 받았는데 조별로 하는건 오랜만이어서 조금 설레었던 것 같다. 전공자도 있었고 다들 코딩 공부를 조금 하시고 오신 분들이라 프로젝트 진행이 원활할것 같았다.</p>
<br/>
<h2 id="프로젝트-기획" class="heading">프로젝트 기획</h2>
<p>아이디어가 많았는데 뭔가 재밌고 우리 모두와 관련된 걸로 하고 싶었다. 아이디어를 냈는데 다른 팀원들도 좋게 봐주셔서 일사천리로 프로젝트를 결정하였다. 방 탈출을 모티브로 하여 퀴즈를 풀며 취업난에서 탈출하는 간단한 퀴즈를 진행한다. 항해99에서 지급받은 강의 내용의 퀴즈를 내면서 그 문제를 맞추면 리뷰를 쓸 수 있고 취업공고 페이지도 보여주는 그런 프로젝트를 계획하였다.</p>
<br/>
<h2 id="역할배분" class="heading">역할배분</h2>
<p>나는 메인 페이지와 로그인 페이지를 맡았는데 로그인 페이지와 회원가입이 연결이 되어있어서 나중에는 랭킹 페이지를 맡게 되었다. 로그인 페이지를 구현했는데 작동이 안 되어서 회원가입 페이지를 맡은 분이 로그인까지 같이 하기로 하였다. 그리고 퀴즈 페이지가 가장 어렵고 시간이 걸릴것 같아 퀴즈 페이지를 두명이 맡았다.</p>
<br/>
<h2 id="와이어프레임--api-설계" class="heading">와이어프레임 &#x26; API 설계</h2>
<p><img src="../../assets//images/posts_img/%ED%95%AD%ED%95%B499-wil-1/%ED%95%AD%ED%95%B499-wil-1-2.png" alt="Untitled.png"></p>
<p><a href="https://www.notion.so/68b25c3d43884ea1be7cfa70e17969ff" target="_blank" rel="noopener noreferer">백수탈출 API </a></p>
<p>API와 와이어프레임으로 먼저 작성해놓으니 나중에 기능 구현을 할때 쉽게 할 수 있었다. 기능 구현에 집중하여 구조를 만들었다.</p>
<br/>
<h2 id="핵심-기능" class="heading"><strong>핵심 기능</strong></h2>
<h3 id="회원가입-및-로그인"><strong>회원가입 및 로그인</strong></h3>
<ul>
<li>회원가입
<ul>
<li>아이디 &#x26; 비밀번호 형식 확인</li>
<li>아이디 중복 확인</li>
<li>DB에 아이디와 비밀번호 저장하여 회원가입 &#x26; 로그인 화면으로 전환</li>
</ul>
</li>
<li>로그인
<ul>
<li>아이디 &#x26; 비밀번호 입력 확인</li>
<li>서버로 POST 요청을 보내 가입 정보가 존재하는지 확인</li>
<li>회원일 경우 토큰 부여</li>
</ul>
</li>
<li>로그아웃 시 토큰이 삭제되고 메인 페이지로 이동한다.</li>
</ul>
<h3 id="랭킹"><strong>랭킹</strong></h3>
<ul>
<li>데이터베이스에 저장된 User들을 불러와서 퀴즈 완료 시간으로 정렬하여 보여준다.</li>
<li>게임을 완료하면 랭킹 페이지로 이동한다.</li>
</ul>
<h3 id="취업공고"><strong>취업공고</strong></h3>
<ul>
<li>크롤링을 통하여 잡코리아 사이트의 취업공고를 보여준다.</li>
</ul>
<h3 id="퀴즈"><strong>퀴즈</strong></h3>
<ul>
<li>퀴즈의 정답을 맞추면 캐릭터가 이동하고 다음 퀴즈로 넘어간다.</li>
<li>정답을 못 맞출시 재도전 및 메인페이지로 돌아갈 수 있다.</li>
</ul>
<br/>
<h2 id="프로젝트-중-힘들었던-점" class="heading"><strong>프로젝트 중 힘들었던 점</strong></h2>
<ul>
<li>Git 협업 경험의 부재로 인한 프로젝트 관리의 어려움</li>
<li>잦은 컨플릭</li>
</ul>
<br/>
<h2 id="trouble-shooting" class="heading"><strong>Trouble Shooting</strong></h2>
<ul>
<li>새로고침을 하면 타이머가 리셋이 되는 문제
<ul>
<li>새로고침 방지할 수 있는 KEYKODE를 작성</li>
</ul>
</li>
<li>정답 란에 영어를 적으면 에러 발생
<ul>
<li>변수 충돌로 인해 변수명을 다시 작성</li>
</ul>
</li>
<li>OG 타이틀 적용 문제
<ul>
<li>로그인 페이지로 랜더링이 되는것을 메인페이지로 바꿈</li>
</ul>
</li>
</ul>
<br/>
<h2 id="what-i-learned" class="heading">What I learned</h2>
<ul>
<li>JWT 인증 방식과 jinja2 템플릿을 이용하여 서버사이드 렌더링에 대해 공부하게 되었고 미니프로젝트에 적용 시키면서 로그인 시 회원정보를 가져오고 페이지 렌더링에 대해 경험해보았다.</li>
<li>팀원들과 협업을 하면서 서로 모르는게 있으면 의지를 하면서 도와주기도 하였고 혼자 코딩 공부를 할때보다 확실히 책임감이 생기면서 집중을 하게 되는것 같다. 그리고 문제를 팀원들과 공유해나가면서 해결하니 확실히 효율적이었다.</li>
</ul>
<h3 id="jwt">JWT</h3>
<ul>
<li>JSON Web Token의 약자로 전자 서명 된 URL-safe (URL로 이용할 수있는 문자 만 구성된)의 JSON이다.</li>
<li>JWT 인증방식은 인증에 필요한 정보들을 암호화시킨 토큰을 말한다. 알고리즘과 토큰 형식을 담는 Header와 data 값을 담는 Payload, 마지막으로 Verify Signature 의 세 부분으로 구성되어 있다.</li>
<li>세션/쿠키 방식은 별도의 저장소 관리가 필요하다. 그러나 JWT는 발급 후 검증만 하면 되기 때문에 추가 저장소가 필요하지 않으며 간편하다는 장점이 있다. 그래서 서버를 확장하거나 유지, 보수하는데 유리하다.</li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>API는 프로그램들이 서로 상호작용하는 것을 도와주는 매개체이다.</li>
<li>웹 사이트 개발에서 다른 서비스에 요청을 보내고 응답을 받기 위해 열려있는 일조으이 은행 창구 역할을 한다.</li>
<li>API는 손님(프로그램)이 주문할 수 있게 메뉴(명령 목록)를 정리하고, 주문(명령)을 받으면 요리사(응용프로그램)와 상호작용하여 요청된 메뉴(명령에 대한 값)를 전달한다.</li>
</ul>
<h3 id="api의-역할">API의 역할</h3>
<ul>
<li>데이터베이스에는 소중한 정보들이 저장되는데 모든 사람들이 이 데이터베이스에 접근할 수 있으면 안된다. API는 이를 방지하기 위해 서버와 데이터베이스에 대한 출입구 역할을 하며, 허용된 사람들에게만 접근성을 부여해준다.</li>
<li>API는 애플리케이션과 기기가 원활하게 통신할 수 있도록 한다.
기서 애플리케이션이란 우리가 흔히 알고 있는 스마트폰 어플이나 프로그램을 말한다. API는 애플리케이션과 기기가 데이터를 원활히 주고받을 수 있도록 돕는 역할을 한다.</li>
<li>API는 모든 접속을 표준화한다.
API는 모든 접속을 표준화하기 때문에 기계/ 운영체제 등과 상관없이 누구나 동일한 액세스를 얻을 수 있다. 쉽게 말해, API는 범용 플러그처럼 작동한다고 볼 수 있다.</li>
</ul>
<br/>
<h2 id="review" class="heading">Review</h2>
<p>4일동안 팀원들과 협업 하며 미니 프로젝트를 만들어보았다. 파이썬 Flask를 처음 써봐서 어려움이 있었지만 강의를 보고 팀원들과 협업을 하여서 프로젝트를 완성할 수 있었던것 같다. 이제 첫주가 지나고 알고리즘 공부를 하게 되는데 부족한 알고리즘 실력을 많이 늘리고 싶고 또 다른 팀원들도 만나서 서로 으쌰으쌰하며 성장해나가고 싶다. 깃에 대한 개념이 많이 부족한데 깃 강의를 들으면서 실습을 해보아야할것 같다. 알고리즘 주차도 화이팅!</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220625]]></title>
    <link>https://dgd03146-github-io.vercel.app//220625</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220625</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 프로그래머스 알고리즘 문제 1 ~ 10</li>
<li>TIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>주말이라 뭔가 여유가 생기는 기분이었다. 뭔가 알고리즘 주차는 주어진 문제와 과제만 해결하면 되어서 스터디원들과 합의하에 자율적으로 공부를 할 수 있었다. 대신 하루에 정해진 문제는 꼭 풀어야했다. 오늘은 16번까지 풀이여서 문제를 풀었는데 확실히 난이도가 조금씩 상승하고 있는걸 느꼈다. 그리고 자바스크립트 메소드를 내가 다 정확히 알지 못해서 검색도 많이 했는데 나중에 결국은 외워야한다. 시간을 내서 메소드를 정리하고 내 머리속에 집어넣자. 메소드를 알고 있으면 알고리즘 문제에 많은 도움이 된다. 빈 노트에 적으면서 문제를 풀면 조금 생각이 정리되어서 좋은것 같다. 아직은 머릿속에서 구현하는 능력이 부족하기에 적어가면서 문제를 풀어야겠다. 해결하는데 어려움을 겪었던 문제들은 정리를 다시해서 풀자! 멘토님이 여러 문제를 푸는것보다 풀었던 문제를 다시 한번 더 풀어보는게 좋다고 말씀하셨다. 확실히 문제를 많이 풀어봐야겠다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 알고리즘 프로그래머스 17~ 24 문제 풀기</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220624]]></title>
    <link>https://dgd03146-github-io.vercel.app//220624</link>
    <pubDate>2022-06-24</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220624</guid>
    <description>
    <![CDATA[항해99 2주차 알고리즘 스터디]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 프로그래머스 알고리즘 문제 1 ~ 10</li>
<li>TIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>드디어 알고리즘 주차가 시작되었다. 오전9시에 알고리즘에 대해 발의를 하고 새로운 조를 짜주었다. 나는 달리기반을 신청하여서 6월30일까지 프로그래머스 38문제를 푸는게 과제였다. 그러려면 하루에 최소 8문제 정도는 풀어야 한다. 팀원들과 문제 풀이 계획을 세우고 바로 알고리즘 문제를 풀기 시작했다. 문제를 풀면서 느낀건 나는 알고리즘을 아직 진짜 못하는구나. 자바스크립트에 대한 개념이 부족하구나 생각했다. 부족한만큼 내가 더 노력해야겠다고 생각했다. 1번부터 10번까지 풀었는데 그중에 두문제를 못 풀었었다. 그래서 다른 사람의 풀이를 들었는데 확실히 다들 알고리즘 문제를 푼 경험이 있으셔서 쉽게 문제를 풀었다. 아직 내가 부족하다는걸 안다. 그러나 주눅들지 말고 그만큼 더 열심히해서 따라잡고 넘으면 된다. 그동안 알고리즘을 계속 미루고 피해왔었는데 이번을 계기로 뭔가 동기부여가 되었다. 꾸준히 계속해서 발전하면 언젠가는 나도 잘할 수 있다. 그냥 하면 된다. 지속해서 성장해나가자!</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 프로그래머스 알고리즘 문제 11 ~ 16</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220623]]></title>
    <link>https://dgd03146-github-io.vercel.app//220623</link>
    <pubDate>2022-06-23</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220623</guid>
    <description>
    <![CDATA[항해99 1주차 프로젝트 마무리 및 회고]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 프로젝트 readme 작성, 회고</li>
<li>TIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>프로젝트 마무리
<ul>
<li>마지막으로 프로젝트의 기능을 점검하고 main branch에다가 최종적으로 커밋을 하였다. 중간중간에 오류도 많았었는데 짧은 기간 동안 팀원들과 함께 협력하면서 프로젝트를 성공적으로 마무리 할 수 있었다. 단기간에 프로젝트를 만드느라 다들 고생하였는데 나에게도 많은 성장이 된 것 같다.</li>
<li>Read me 작성을 하면서 프로젝트를 회고해보았는데 우리가 겪었던 어려움들을 생각해보고 어떻게 해결해갔는지를 작성하였다. Trouble shooting이라고 부르는데 문제 해결과정을 기술하는게 처음이라 쉽지는 않았다. 이러한 경험들이 나중에 낯선 문제들을 만났을때에 좋은 경험들로 작용할 것 같다.</li>
</ul>
</li>
<li>아쉬웠던 점
<ul>
<li>프로젝트를 하면서 조금 더 내가 코드를 짜보고 적극적으로 기능을 추가하여서 구현할 수 있었는데 그점이 조금 아쉽다. 내가 많이 부족하기도 하고 단기간에 프로젝트를 만드느라 강의를 많이 못 들었던 점. Flask를 처음 써봐서 익숙하지 않았었던 점이 아쉽게 작용했다. 조금 더 열심히 할 수 있었지 않았을까 하는 아쉬움이 살짝 든다.</li>
<li>Git으로 프로젝트를 협업하는 경험의 부족으로 매번 branch에 푸쉬하고 불러올때 오류를 겪었다. 소스트리로 된 강의가 있지만 터미널로 하고 싶어서 인터넷에 찾아보면서 하였는데 정확한 개념이 없이 하니 파일도 몇번 날라가고 어려움을 겪었다. Git으로 된 자료들을 찾아보면서 정확하게 이해를 하고 넘어가야할 필요성을 느꼈다. 나중에 공부 다시 꼭 하고 블로그에도 정리를 해놓자.</li>
</ul>
</li>
<li>미니 프로젝트를 마치고 이제 알고리즘 주차가 시작된다. 알고리즘을 평소에 공부를 거의 안하다시피하여서 많이 부족하다고 느끼는데 이번을 계기로 알고리즘에 더이상 두려워하지말고 익숙해졌으면 좋겠다. 하면 는다! 하면!</li>
<li>당분간 개인 공부를 할 시간이 있을지 모르겠다. 주말에 여유가 있으면 React나 Git을 공부하면서 블로그에도 정리를 하고 토이프로젝트도 마무리 하여야겠다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 알고리즘</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220622]]></title>
    <link>https://dgd03146-github-io.vercel.app//220622</link>
    <pubDate>2022-06-22</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220622</guid>
    <description>
    <![CDATA[항해99 1주차 프로젝트 코드 구현 & Jinja]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<p>[x] [항해99] 1주차 프로젝트
[x] Ranking page 구현
[x] 코드 합치기, 기능 체크 및 배포
[x] TIL 작성</p>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>[항해99] 1주차 프로젝트가 어느정도 구현이 되었고 Ranking page만 남았다. 팀원들이 출중하여서 프로젝트가 원활하게 진행되었던 것 같다. 나는 비교적 쉬운 파트를 맡았던 것 같았고 Jinja를 사용해본 적이 없었기에 Ranking page를 데이터베이스에서 불러와 Jinja로 구현해보는것을 하기로 하였다.
<ul>
<li>파이썬 서버에서 데이터베이스에서 데이터를 불러오고 하는게 좀 헷갈렸는데 강의를 보면서 다시 복습하니 이해가 되었다. Jinja 템플릿 언어를 사용하면 html에서도 코드를 사용할 수 있다.</li>
<li>Jinja는 python flask 패키지에 내장된 템플릿 엔진이다. 개발자가 동적으로 변하는 웹 페이지를 쉽게 구현할 수 있도록 도와준다.</li>
</ul>
</li>
<li>[항해99] 1주차 프로젝트 코드 합치기, 배포 완료
<ul>
<li>코드를 합치는 과정에서 코드가 날라갈까봐 두려워서 main에 합치지 않고 branch에 먼저 커밋 및 푸시를 하였다. Git으로 협업해본 경험이 없어 프로젝트를 끝내고 팀원들과 Git으로 협업하는 방법을 실습해보아야겠다.</li>
</ul>
</li>
<li>프로젝트가 거의 마무리되었고 내일 최종 점검 및 Readme 작성, 회고만 하면 될것 같다. 짧은 시간내에 팀원들과 협력해서 프로젝트를 만들었는데 간단하지만 나름 완성도 있게 만든것 같아 뿌듯하다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 1주차 프로젝트 배포 및 점검
<ul>
<li>Read me 작성</li>
<li>회고</li>
</ul>
</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220621]]></title>
    <link>https://dgd03146-github-io.vercel.app//220621</link>
    <pubDate>2022-06-21</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220621</guid>
    <description>
    <![CDATA[항해99 1주차 프로젝트 코드 구현 & JWT]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해99] 1주차 프로젝트</li>
<li>Main page 구현</li>
<li>Login page 강의 듣고 구현</li>
<li>TIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>[항해99] 1주차 프로젝트 코드 구현을 시작하였다. 나는 Main page와 Login page를 맡았는데 Login 기능을 구현하는데 조금 어려움을 겪었다. 그래서 강의를 보았고 JWT를 사용하여 로그인을 구현하는 방법을 배웠다. 처음에 원리를 이해하기 어려웠는데 강의를 보다보니 코드가 조금 이해되었고 프로젝트에도 적용시킬 수 있었다.
<ul>
<li>JWT란 JSON Web Token의 줄임말로, JSON 객체를 사용해 정보를 안정성 있게 전달하는 웹표준이다. 예를 들어, 로그인 기능을 생각해보면 사용자가 로그인하면 서버에서 회원임을 인증하는 토큰을 넘겨줌으로써 이후 회원만 접근할 수 있는 서비스 영역에서 신분을 확인하는 데 쓰일 수 있다.</li>
<li>플라스크 서버에서 로그인 기능 구현
<ul>
<li>로그인 시, 비밀번호를 같은 방법으로 암호화한 후, DB에서 해당 아이디와 비밀번호를 갖는 회원이 있는지 찾는다. 회원 정보가 없는 경우 실패 메시지를 보내고, 찾은 경우 아이디와 토큰 만료 시간을 저장하는 토큰을 만들어 넘겨준다.</li>
<li>로그인 성공 메시지를 받으면 건네받은 토큰을 쿠키로 저장하여 만료되기 전까지 갖고 있으면서, API 요청을 보낼 때마다 회원임을 확인받는다.</li>
<li>로그아웃 시 해당 토큰을 삭제한다.</li>
</ul>
</li>
</ul>
</li>
<li>Git 협업 개념의 부족
<ul>
<li>터미널로 깃을 사용해서 branch에 코드를 커밋하고 main branch에 코드를 merge하는 방식이 아직 익숙하지 않아서 프로젝트 도중 Git을 사용하다가 코드를 2번 정도 날려먹었다. 강의에서는 Sourcetree를 사용해서 branch를 다루는데 멘토님이 결국엔 터미널을 써야 편리하고 그게 좋은 방법이라고 해서 터미널에 익숙해지려고 한다. 프로젝트를 어서 끝내고 시간이 남으면 Git 공부를 하면서 블로그에 정리도 하여 개념을 내것으로 만들어야겠다.</li>
</ul>
</li>
<li>프로젝트로 인한 React 공부 시간의 부족
<ul>
<li>React로 진행중이던 토이프로젝트를 끝내려고 마음 먹었는데 하다보니 시간이 없었다. 프로젝트 하는 동안엔 시간이 나지 않을것 같아서 주말에 하거나 프로젝트를 빠르게 마무리하고 React 토이프로젝트를 진행해야할 것 같다.</li>
</ul>
</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>[항해99] 1주차 프로젝트 기능 마무리, 코드 합치기</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220620]]></title>
    <link>https://dgd03146-github-io.vercel.app//220620</link>
    <pubDate>2022-06-20</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220620</guid>
    <description>
    <![CDATA[항해99 OT & 1주차 프로젝트 설계]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>[항해] OT</li>
<li>[항해] 1주차 조별과제 Starting Assignment 작성 , 기획 멘토링</li>
<li>Git branch로 협업하는 방법 공부</li>
<li>TIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>오늘 드디어 항해 OT를 하였다. 조별로 나뉘어서 1주차 과제를 부여받았다. 1주차 과제는 사전과제에 공부한 지식을 바탕으로 프로젝트를 완성하는 것이었다. Jinja2 템플릿 엔진을 이용한 서버사이드 렌더링, JWT 인증 방식으로 로그인 구현하기가 필수 내용이었고 새로운 강의를 부여받았다. 프로젝트 주제를 정하고 SW를 작성하며 프로젝트 를 구체화해갔다.</li>
<li>Starting Assignment 작성
<ul>
<li>프로젝트 제목, 와이어 프레임, 기능 정리, 역할분담을 하였다. 로그인 page와 main page를 맡았고 내일부터 코드 구현을 할 예정이다.</li>
</ul>
</li>
<li>프로젝트 기획멘토링
<ul>
<li>멘토님과 우리가 설계한 SW에 대해서 의논을 하였다. 아이디어가 신선하고 충분히 기간안에 만들수 있을것 같다고 하였다. 개인적으로 궁금한점이 많이 있어서 질문을 했었는데 도움이 많이 되었다.</li>
</ul>
</li>
<li>Git branch로 협업방법 공부
<ul>
<li>프로젝트로 협업을 하기 위해서 repository를 branch로 나누어서 협업하는 방법을 알고 있어야 했는데 터미널로 하고 싶어서 인터넷에 검색을 하면서 찾아보고 branch에 commit 및 push 그리고 main branch에 merge하는 방법까지 실습해보았다.</li>
<li>Issue에 대해서도 조금 강의를 들었는데 아직은 개념이 정확하게 잡히지 않아서 Git 강의를 다시 들으면서 전체적으로 복습을 하고 블로그에 정리를 해서 내것으로 만들어야겠다.</li>
</ul>
</li>
<li>진행중이던 React Question Diary 토이프로젝트를 오늘 끝내려고 계획 했으나 항해99에 몰두한 나머지 시간이 없어서 따로 개인 공부를 할수가 없었다. 시간 관리를 잘해서 빠른 시일내에 React 프로젝트도 마무리 할 수 있도록 해야겠다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>Question Diary 프로젝트 CRUD</li>
<li>웹개발 플러스 로그인 강의</li>
<li>로그인 페이지 구현</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[TIL] 20220616]]></title>
    <link>https://dgd03146-github-io.vercel.app//220616</link>
    <pubDate>2022-06-16</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220616</guid>
    <description>
    <![CDATA[항해99 사전 강의 정리 & Question Diary 토이 프로젝트 기본 틀 잡기]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-i-did-today" class="heading">What I Did Today</h2>
<ul>
<li>Question Diary toy project mock-up &#x26; 기본 틀</li>
<li>TIL 작성</li>
<li>웹개발 종합반 1 ~ 5주차 WIL 작성</li>
</ul>
<br/>
<h2 id="daily-review" class="heading">Daily Review</h2>
<ul>
<li>항해 입학 시험에 통과하였다. 다음주부터 월~토 아침 9시부터 저녁 9시까지 부트캠프에 참여하게 된다. 99일간의 짧지만 긴 여정이 될 것 이다. 주특기는 당연히 React를 선택하였다. 프론트엔드 개발자가 되고 싶고 평소에도 React를 조금씩 공부를 했기에 항해99에서 프론트로써 하는 프로젝트들이 기대가 된다. 수료를 마치고 많이 성장해서 내가 원하는 곳에 취업을 하면 좋을 것 같다.</li>
<li>웹개발 종합반 강의 1 ~ 5주차 공부한것들을 정리하였다. 알고 있는것도 많았지만 새로 배우는 개념들도 있었다. 입학시험을 위해 강의를 들었는데 입학시험이 생각보다 쉽게 나와서 바로 풀 수 있었다.</li>
<li>한입 크기로 잘라먹는 React 강의를 들으면서 일기장을 클론코딩 하였는데 다 듣고 나서 추가적인 기능을 추가하여 혼자 스스로의 힘으로 토이 프로젝트를 만들려고 한다. 확실히 처음부터 모든 것을 만드는것은 어려운 것 같다. 모를때마다 강의를 다시 보면서 내가 스스로 코드를 짤 수 있도록 혼자 해결하는 힘을 길러야겠다. 기능과 디자인을 정리하고 Calendar 라이브러리를 리액트에서 처음 사용하고 적용하는데 생각보다 시간이 많이 걸렸다. 내일은 코드를 짜는데만 집중을 해서 내일 안에 왠만하면 토이 프로젝트를 완성시키고 싶다.</li>
</ul>
<br/>
<h2 id="tomorrows-to-dos" class="heading">Tomorrow’s To-dos</h2>
<ul>
<li>Question Diary toy project 완성</li>
<li>TIL 작성</li>
</ul>
<br/>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 스파르타코딩클럽 웹개발 종합반 5주차]]></title>
    <link>https://dgd03146-github-io.vercel.app//220606-wil</link>
    <pubDate>2022-06-06</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220606-wil</guid>
    <description>
    <![CDATA[EC2에 프로젝트 배포]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="목표" class="heading">목표</h2>
<ol>
<li>Flask 프레임워크를 활용해서 API를 만들 수 있다.</li>
<li>EC2에 내 프로젝트를 올린다</li>
</ol>
<br/>
<p><img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F02fac3d2-c8d5-473a-b596-406c3ae5b199%2FUntitled.png?table=block&#x26;id=7aa0b1b4-85c0-49d0-b33c-39336d9b7297&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=2000&#x26;userId=&#x26;cache=v2" alt=""></p>
<h2 id="프로젝트를-서버에-올리기" class="heading"><strong>프로젝트를 서버에 올리기</strong></h2>
<h3 id="웹서비스-런칭-에-필요한-개념-소개">"웹서비스 런칭" 에 필요한 개념 소개</h3>
<aside>
👉 이제 내가 만든 프로젝트를 배포해보자. 배포는 누구나 내 서비스를 사용할 수 있게 하기 위해서 작업들이다.  웹 서비스를 런칭하는 것!
</aside>
<ul>
<li>웹 서비스를 런칭하기 위해 클라이언트의 요청에 항상 응답해줄 수 있는 서버에 프로젝트를 실행시켜준다.</li>
<li>언제나 요청에 응답하려면,</li>
</ul>
<ol>
<li>컴퓨터가 <strong>항상</strong> 켜져있고 프로그램이 실행되어 있어야하고,</li>
<li>모두가 접근할 수 있는 공개 주소인 공개 IP 주소(Public IP Address)로 나의 웹 서비스에 <strong>접근할 수 있도록</strong> 해야한다.</li>
</ol>
<ul>
<li>서버는 그냥 컴퓨터라는거! 외부 접속이 가능하게 설정한 다음에 내 컴퓨터를 서버로 사용할 수도 있다.</li>
<li>AWS 라는 클라우드 서비스에서 편하게 서버를 관리하기 위해서 항상 켜 놓을 수 있는 컴퓨터인 EC2 사용권을 구입해 서버로 사용한다.</li>
</ul>
<br/>
<h2 id="review" class="heading">Review</h2>
<p>1~4주차 까지 배웠던 모든 개념을 통합해서 기존에 만든 프로젝트를 배포하는 방법을 배웠다. 내가 직접 만든 사이트를 가비아를 통해서 배포하고 다른 사람들도 내 사이트를 이용할 수 있어서 신기했다. 드디어 웹 개발 사전강의를 수료하였다. 항해99 입학시험을 위해 들었지만 기존에 알고 있는 것도 있었서 복습도 하고 새로운 개념도 배울 수 있었다. 강의를 한번 더 들어서 입학시험까지 통과할 수 있도록 항해하자!</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 스파르타코딩클럽 웹개발 종합반 4주차]]></title>
    <link>https://dgd03146-github-io.vercel.app//220530-wil</link>
    <pubDate>2022-05-30</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220530-wil</guid>
    <description>
    <![CDATA[Flask 프레임워크를 통해 API를 만들고 클라이언트에 연결하기]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="목표" class="heading">목표</h2>
<ol>
<li>Flask 프레임워크를 활용해서 API를 만들 수 있다.</li>
</ol>
<br/>
<h2 id="flask---서버만들기" class="heading"><strong>Flask - 서버만들기</strong></h2>
<h3 id="flask-기본-실행">Flask 기본 실행</h3>
<ul>
<li>
<p>Flask 프레임워크: 서버를 구동시켜주는 편한 코드 모음. 서버를 구동하려면 필요한 복잡한 일들을 쉽게 가져다 쓸 수 있다.</p>
  <aside>
  👉 프레임워크를 쓰지 않으면 태양초를 빻아서 고추장을 만드는 격!
  프레임워크는 3분 요리/소스 세트라고 생각하면 된다!
  </aside>
</li>
<li>
<p><a href="http://app.py" target="_blank" rel="noopener noreferer">app.py</a> 파일을 만들어 아래 코드를 붙여넣어본다.</p>
  <aside>
  👉 파일 이름은 아무렇게나 해도 상관없지만, 통상적으로 flask 서버를 돌리는 파일은 app.py라고 이름 짓는!
  </aside>
<p><strong>flask 시작 코드</strong></p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
</span><span class="code-line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">   <span class="token keyword">return</span> <span class="token string">'This is Home!'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  
</span><span class="code-line">   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
<li>
<p>오른쪽 클릭 → '<code>Run app</code>'을 클릭하고, 터미널에 아래와 같은 메시지가 뜨면 실행 성공!
<img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F210e5f1c-5d62-4181-b79d-a39e9c17b664%2FUntitled.png?table=block&#x26;id=dfd29600-6c3b-44d8-b8b2-76cc38746c90&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=2000&#x26;userId=&#x26;cache=v2" alt="Untitled"></p>
</li>
<li>
<p>이제 크롬에서 <a href="http://localhost:5000" target="_blank" rel="noopener noreferer">http://localhost:5000</a>/ 으로 접속!</p>
  <aside>
  👉 화면에 `Hello World!` 가 보이면 성공한 것! 👏
  </aside>
</li>
<li>
<p>종료하는 방법</p>
  <aside>
  👉 터미널 창을 클릭하시고, ctrl + c 을 누르시면 서버를 종료할 수 있다.
  </aside>
</li>
</ul>
<h3 id="url-나눠보기">URL 나눠보기</h3>
<ul>
<li>
<p>@app.route('/) 부분을 수정해서 URL을 나눌 수 있다!</p>
  <aside>
  👉 url 별로 함수명이 같거나, route('/')내의 주소가 같으면 안된다.
  </aside>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
</span><span class="code-line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">   <span class="token keyword">return</span> <span class="token string">'This is Home!'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/mypage'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">mypage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
</span><span class="code-line">   <span class="token keyword">return</span> <span class="token string">'This is My Page!'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  
</span><span class="code-line">   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
</ul>
<br/>
<h2 id="flask---본격-api-만들기" class="heading"><strong>Flask - 본격 API 만들기</strong></h2>
<h3 id="1-들어가기-전에-get-post-요청타입---리마인드">1) 들어가기 전에: GET, POST 요청타입 - 리마인드</h3>
<aside>
👉 리마인드! 
은행의 창구가 API와 같다! ****같은 예금 창구에서도 개인 고객이냐 기업 고객이냐에 따라 처리하는 것이 다른 것처럼,
<p><strong>클라이언트가 요청 할 때에도, "방식"이 존재한다.</strong>
클라이언트는 요청할 때 HTTP request method(요청 메소드)를 통해, 어떤 요청 종류인지 응답하는 서버 쪽에 정보를 알려주는 것이다.</p>
</aside>
<aside>
👉 GET, POST 방식
<ul>
<li>GET → 통상적으로! 데이터 조회(Read)를 요청할 때<br>
예) 영화 목록 조회<br>
→ <strong>데이터 전달</strong> : URL 뒤에 물음표를 붙여 key=value로 전달<br>
→ 예: google.com?q=북극곰</li>
<li>POST → 통상적으로! 데이터 생성(Create), 변경(Update), 삭제(Delete) 요청 할 때<br>
예) 회원가입, 회원탈퇴, 비밀번호 수정<br>
→ <strong>데이터 전달 :</strong> 바로 보이지 않는 HTML body에 key:value 형태로 전달</li>
</ul>
</aside>
<h3 id="2-get-post-요청에서-클라이언트의-데이터를-받는-방법">2) GET, POST 요청에서 클라이언트의 데이터를 받는 방법</h3>
<ul>
<li>
<p>예를 들어, 클라이언트에서 서버에 title_give란 키 값으로 데이터를 들고왔다고 생각한다. (주민등록번호 라는 키 값으로 900120- .. 을 가져온 것과 같은 의미)
<strong>Jquery 임포트</strong></p>
<pre class="language-csharp"><code class="language-csharp code-highlight"><span class="code-line"><span class="token operator">&#x3C;</span><span class="token class-name">script</span> src<span class="token operator">=</span><span class="token string">"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&#x3C;</span><span class="token operator">/</span>script<span class="token operator">></span>
</span></code></pre>
<p><strong>GET 요청 API코드</strong></p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">test_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">   title_receive <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title_give'</span><span class="token punctuation">)</span>
</span><span class="code-line">   <span class="token keyword">print</span><span class="token punctuation">(</span>title_receive<span class="token punctuation">)</span>
</span><span class="code-line">   <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'result'</span><span class="token punctuation">:</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'이 요청은 GET!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></code></pre>
<p><strong>GET 요청 확인 Ajax코드</strong></p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/test?title_give=봄날은간다'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p><strong>POST 요청 API코드</strong></p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">test_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">   title_receive <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'title_give'</span><span class="token punctuation">]</span>
</span><span class="code-line">   <span class="token keyword">print</span><span class="token punctuation">(</span>title_receive<span class="token punctuation">)</span>
</span><span class="code-line">   <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'result'</span><span class="token punctuation">:</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'이 요청은 POST!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></code></pre>
<p><strong>POST 요청 확인 Ajax코드</strong></p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/test'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">title_give</span><span class="token operator">:</span> <span class="token string">'봄날은간다'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
<br/>
<h2 id="review" class="heading">Review</h2>
<p>Flask 프레임워크를 활용해서 API를 만들고 클라이언트에 연결하여서 POST와 GET 요청을 통해 데이터를 보여주고 전달하는 실습을 진행해보았다. 뭔가 제대로 된 코딩을 하는 느낌이 들어서 재밌게 간단한 프로젝트를 진행하였다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 스파르타코딩클럽 웹개발 종합반 3주차]]></title>
    <link>https://dgd03146-github-io.vercel.app//220523-wil</link>
    <pubDate>2022-05-23</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220523-wil</guid>
    <description>
    <![CDATA[파이썬 기초 문법, 크롤링, pymongo를 통해 mongoDB 제어]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="목표" class="heading">목표</h2>
<ol>
<li>파이썬 기초 문법을 안다.</li>
<li>원하는 페이지를 크롤링 할 수 있다.</li>
<li>pymongo를 통해 mongoDB를 제어할 수 있다.</li>
</ol>
<br/>
<h2 id="파이썬" class="heading"><strong>파이썬</strong></h2>
<h3 id="파이썬-기초-문법">파이썬 기초 문법</h3>
<details>
<summary>변수 & 기본연산</summary>
<div markdown="1">
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a <span class="token operator">=</span> <span class="token number">3</span>      <span class="token comment"># 3을 a에 넣는다</span>
</span><span class="code-line">b <span class="token operator">=</span> a      <span class="token comment"># a를 b에 넣는다</span>
</span><span class="code-line">a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># a+1을 다시 a에 넣는다</span>
</span><span class="code-line">
</span><span class="code-line">num1 <span class="token operator">=</span> a<span class="token operator">*</span>b <span class="token comment"># a*b의 값을 num1이라는 변수에 넣는다</span>
</span><span class="code-line">num2 <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment"># 99의 값을 num2이라는 변수에 넣는다</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 변수의 이름은 마음대로 지을 수 있음!</span>
</span><span class="code-line"><span class="token comment"># 진짜 "마음대로" 짓는 게 좋을까? var1, var2 이렇게?</span>
</span></code></pre>
</div>
</details>
<details>
<summary>자료형</summary>
<div markdown="1">
<ul>
<li>
<p>숫자, 문자형</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">name <span class="token operator">=</span> <span class="token string">'bob'</span> <span class="token comment"># 변수에는 문자열이 들어갈 수도 있고,</span>
</span><span class="code-line">num <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment"># 숫자가 들어갈 수도 있고,</span>
</span><span class="code-line">
</span><span class="code-line">is_number <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># True 또는 False -> "Boolean"형이 들어갈 수도 있다.</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">#########</span>
</span><span class="code-line"><span class="token comment"># 그리고 List, Dictionary 도 들어갈 수도 있다.</span>
</span></code></pre>
</li>
<li>
<p>리스트 형 (Javascript의 배열형과 동일)</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">a_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 리스트에 값을 넣는다</span>
</span><span class="code-line">a_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 리스트에 [2,3]이라는 리스트를 다시 넣는다</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># a_list의 값은? [1,[2,3]]</span>
</span><span class="code-line"><span class="token comment"># a_list[0]의 값은? 1</span>
</span><span class="code-line"><span class="token comment"># a_list[1]의 값은? [2,3]</span>
</span><span class="code-line"><span class="token comment"># a_list[1][0]의 값은? 2</span>
</span></code></pre>
</li>
<li>
<p>Dictionary 형 (Javascript의 dictionary형과 동일)</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">a_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bob'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span>
</span><span class="code-line">a_dict<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">178</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># a_dict의 값은? {'name':'bob','age':21, 'height':178}</span>
</span><span class="code-line"><span class="token comment"># a_dict['name']의 값은? 'bob'</span>
</span><span class="code-line"><span class="token comment"># a_dict['age']의 값은? 21</span>
</span><span class="code-line"><span class="token comment"># a_dict['height']의 값은? 178</span>
</span></code></pre>
</li>
<li>
<p>Dictionary 형과 List형의 조합</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bob'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'carry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># people[0]['name']의 값은? 'bob'</span>
</span><span class="code-line"><span class="token comment"># people[1]['name']의 값은? 'carry'</span>
</span><span class="code-line">
</span><span class="code-line">person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'john'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">}</span>
</span><span class="code-line">people<span class="token punctuation">.</span>append<span class="token punctuation">(</span>person<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># people의 값은? [{'name':'bob','age':20},{'name':'carry','age':38},{'name':'john','age':7}]</span>
</span><span class="code-line"><span class="token comment"># people[2]['name']의 값은? 'john'</span>
</span></code></pre>
</li>
</ul>
</div>
</details>
<details>
<summary>함수</summary>
<div markdown="1">
<ul>
<li>
<p>함수의 정의 - 이름은 마음대로 정할 수 있음!</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 수학문제에서</span>
</span><span class="code-line">f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span>
</span><span class="code-line">y <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">y의 값은? <span class="token number">7</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 참고: 자바스크립트에서는</span>
</span><span class="code-line">function f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">	<span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 파이썬에서</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span>
</span><span class="code-line">
</span><span class="code-line">y <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">y의 값은? <span class="token number">7</span>
</span></code></pre>
</li>
<li>
<p>함수의 응용</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">sum_all</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">return</span> a<span class="token operator">*</span>b
</span><span class="code-line">
</span><span class="code-line">result <span class="token operator">=</span> sum_all<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> mul<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># result라는 변수의 값은?</span>
</span></code></pre>
</li>
</ul>
</div>
</details>
<details>
<summary>조건문</summary>
<div markdown="1">
<ul>
<li>
<p>if / else 로 구성!</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">oddeven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># oddeven이라는 이름의 함수를 정의한다. num을 변수로 받는다.</span>
</span><span class="code-line">	<span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># num을 2로 나눈 나머지가 0이면</span>
</span><span class="code-line">		 <span class="token keyword">return</span> <span class="token boolean">True</span>   <span class="token comment"># True (참)을 반환한다.</span>
</span><span class="code-line">	<span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 아니면,</span>
</span><span class="code-line">		 <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token comment"># False (거짓)을 반환한다.</span>
</span><span class="code-line">
</span><span class="code-line">result <span class="token operator">=</span> oddeven<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># result의 값은 무엇일까요?</span>
</span></code></pre>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">is_adult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>
</span><span class="code-line">		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'성인입니다'</span><span class="token punctuation">)</span>    <span class="token comment"># 조건이 참이면 성인입니다를 출력</span>
</span><span class="code-line">	<span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'청소년이에요'</span><span class="token punctuation">)</span>  <span class="token comment"># 조건이 거짓이면 청소년이에요를 출력</span>
</span><span class="code-line">
</span><span class="code-line">is_adult<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
</ul>
</div>
</details>
<details>
<summary>반복문</summary>
<div markdown="1">
<p>👉 파이썬에서의 반복문은, 리스트의 요소들을 하나씩 꺼내쓰는 형태이다.</p>
<ul>
<li>
<p>무조건 리스트와 함께 쓰인다!</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'사과'</span><span class="token punctuation">,</span><span class="token string">'배'</span><span class="token punctuation">,</span><span class="token string">'감'</span><span class="token punctuation">,</span><span class="token string">'귤'</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 사과, 배, 감, 귤 하나씩 꺼내어 찍힙니다.</span>
</span></code></pre>
</li>
<li>
<p>과일 갯수 세기 함수</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'사과'</span><span class="token punctuation">,</span><span class="token string">'배'</span><span class="token punctuation">,</span><span class="token string">'배'</span><span class="token punctuation">,</span><span class="token string">'감'</span><span class="token punctuation">,</span><span class="token string">'수박'</span><span class="token punctuation">,</span><span class="token string">'귤'</span><span class="token punctuation">,</span><span class="token string">'딸기'</span><span class="token punctuation">,</span><span class="token string">'사과'</span><span class="token punctuation">,</span><span class="token string">'배'</span><span class="token punctuation">,</span><span class="token string">'수박'</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
</span><span class="code-line">	<span class="token keyword">if</span> fruit <span class="token operator">==</span> <span class="token string">'사과'</span><span class="token punctuation">:</span>
</span><span class="code-line">		count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 사과의 갯수를 세어 보여준다.</span>
</span></code></pre>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">count_fruits</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">	count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">	<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
</span><span class="code-line">		<span class="token keyword">if</span> fruit <span class="token operator">==</span> target<span class="token punctuation">:</span>
</span><span class="code-line">			count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">	<span class="token keyword">return</span> count
</span><span class="code-line">
</span><span class="code-line">subak_count <span class="token operator">=</span> count_fruits<span class="token punctuation">(</span><span class="token string">'수박'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>subak_count<span class="token punctuation">)</span> <span class="token comment">#수박의 갯수</span>
</span><span class="code-line">
</span><span class="code-line">gam_count <span class="token operator">=</span> count_fruits<span class="token punctuation">(</span><span class="token string">'감'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>gam_count<span class="token punctuation">)</span> <span class="token comment">#감의 갯수</span>
</span></code></pre>
</li>
<li>
<p>다른 예제</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">          <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'carry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">          <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">          <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'smith'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">          <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ben'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 모든 사람의 이름과 나이를 출력해보기.</span>
</span><span class="code-line"><span class="token keyword">for</span> person <span class="token keyword">in</span> people<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 이번엔, 반복문과 조건문을 응용한 함수를 만들어보기.</span>
</span><span class="code-line"><span class="token comment"># 이름을 받으면, age를 리턴해주는 함수</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">get_age</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> person <span class="token keyword">in</span> people<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> person<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> myname<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">'해당하는 이름이 없습니다'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>get_age<span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>get_age<span class="token punctuation">(</span><span class="token string">'kay'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
</ul>
</div>
</details>
<br/>
<h2 id="웹-스크롤링" class="heading">웹 스크롤링</h2>
<h3 id="웹스크래핑-해보기-영화-제목">웹스크래핑 해보기 (영화 제목)</h3>
<ul>
<li>
<p>패키지 추가 설치하기(beautifulsoup4)</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">bs4
</span></code></pre>
</li>
<li>
<p>크롤링 기본 세팅</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> requests
</span><span class="code-line"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
</span><span class="code-line">
</span><span class="code-line">headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span><span class="token punctuation">}</span>
</span><span class="code-line">data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://movie.naver.com/movie/sdb/rank/rmovie.naver?sel=pnt&#x26;date=20210829'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
</span></code></pre>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> requests
</span><span class="code-line"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 타겟 URL을 읽어서 HTML를 받아오고,</span>
</span><span class="code-line">headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span><span class="token punctuation">}</span>
</span><span class="code-line">data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://movie.naver.com/movie/sdb/rank/rmovie.naver?sel=pnt&#x26;date=20210829'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># HTML을 BeautifulSoup이라는 라이브러리를 활용해 검색하기 용이한 상태로 만듦</span>
</span><span class="code-line"><span class="token comment"># soup이라는 변수에 "파싱 용이해진 html"이 담긴 상태가 됨</span>
</span><span class="code-line"><span class="token comment"># 이제 코딩을 통해 필요한 부분을 추출하면 된다.</span>
</span><span class="code-line">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
<li>
<p>select / select_one의 사용법을 익혀보기.</p>
  <aside>
  👉 영화 제목을 가져와보기!
  </aside>
  <aside>
  👉 태그 안의 텍스트를 찍고 싶을 땐 → 태그.text  
      태그 안의 속성을 찍고 싶을 땐 → 태그['속성']
  </aside>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> requests
</span><span class="code-line"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># URL을 읽어서 HTML를 받아오고,</span>
</span><span class="code-line">headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span><span class="token punctuation">}</span>
</span><span class="code-line">data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://movie.naver.com/movie/sdb/rank/rmovie.naver?sel=pnt&#x26;date=20210829'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># HTML을 BeautifulSoup이라는 라이브러리를 활용해 검색하기 용이한 상태로 만듦</span>
</span><span class="code-line">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># select를 이용해서, tr들을 불러오기</span>
</span><span class="code-line">movies <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#old_content > table > tbody > tr'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># movies (tr들) 의 반복문을 돌리기</span>
</span><span class="code-line"><span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># movie 안에 a 가 있으면,</span>
</span><span class="code-line">    a_tag <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'td.title > div > a'</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> a_tag <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># a의 text를 찍어본다.</span>
</span><span class="code-line">        <span class="token keyword">print</span> <span class="token punctuation">(</span>a_tag<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</span></code></pre>
</li>
<li>
<p>beautifulsoup 내 select에 미리 정의된 다른 방법</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 선택자를 사용하는 방법 (copy selector)</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'태그명'</span><span class="token punctuation">)</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.클래스명'</span><span class="token punctuation">)</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#아이디명'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'상위태그명 > 하위태그명 > 하위태그명'</span><span class="token punctuation">)</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'상위태그명.클래스명 > 하위태그명.클래스명'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 태그와 속성값으로 찾는 방법</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'태그명[속성="값"]'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 한 개만 가져오고 싶은 경우</span>
</span><span class="code-line">soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'위와 동일'</span><span class="token punctuation">)</span>
</span></code></pre>
</li>
<li>
<p>항상 정확하지는 않으나, 크롬 개발자도구를 참고할 수도 있다.</p>
<ol>
<li>원하는 부분에서 마우스 오른쪽 클릭 → 검사</li>
<li>원하는 태그에서 마우스 오른쪽 클릭</li>
<li>Copy → Copy selector로 선택자를 복사할 수 있음
<img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6a40280b-252d-4655-9540-b76bfed20292%2FUntitled.png?table=block&#x26;id=46697e28-6788-4588-a390-e84b8c1eb1db&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=1670&#x26;userId=&#x26;cache=v2" alt=""></li>
</ol>
</li>
</ul>
<br/>
<h2 id="db개괄" class="heading"><strong>DB개괄</strong></h2>
<h3 id="db의-두-가지-종류">DB의 두 가지 종류</h3>
<aside>
👉 Database에는, 크게 두 가지 종류가 있다.
</aside>
<p><img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff78826c3-3d3d-4789-98bf-dd85cb229fad%2FUntitled.png?table=block&#x26;id=2a483d31-3d11-441b-9158-076e77418b2b&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=770&#x26;userId=&#x26;cache=v2" alt=""></p>
<aside>
👉 RDBMS(SQL)
행/열의 생김새가 정해진 엑셀에 데이터를 저장하는 것과 유사합니다. 데이터 50만 개가 적재된 상태에서, 갑자기 중간에 열을 하나 더하기는 어려울 것이다. 그러나, 정형화되어 있는 만큼, 데이터의 일관성이나 / 분석에 용이할 수 있다.  
ex) MS-SQL, My-SQL 등
</aside>
<aside>
👉 No-SQL
딕셔너리 형태로 데이터를 저장해두는 DB이다. 고로 데이터 하나 하나 마다 같은 값들을 가질 필요가 없게 된다. 자유로운 형태의 데이터 적재에 유리한 대신, 일관성이 부족할 수 있다.  
ex) MongoDB
</aside>
<br/>
<h2 id="pymongo로-db조작하기" class="heading"><strong>pymongo로 DB조작하기</strong></h2>
<h3 id="pymongo-사용법">pymongo 사용법</h3>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 저장 - 예시</span>
</span><span class="code-line">doc <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bobby'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span>
</span><span class="code-line">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 한 개 찾기 - 예시</span>
</span><span class="code-line">user <span class="token operator">=</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bobby'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 여러개 찾기 - 예시 ( _id 값은 제외하고 출력)</span>
</span><span class="code-line">all_users <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'_id'</span><span class="token punctuation">:</span><span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 바꾸기 - 예시</span>
</span><span class="code-line">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bobby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$set'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 지우기 - 예시</span>
</span><span class="code-line">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bobby'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></code></pre>
<br/>
<h2 id="review" class="heading">Review</h2>
<p>웹크롤링과 pymongo로 mongoDB를 조작하는 방법을 배웠다. 크롤링을 통해서 웹사이트의 정보를 가지고 올 수 있는게 신기하였고 웹스크래핑 결과를 데이터베이스에 데이터를 저장하고, 찾고, 바꾸고, 지우는걸 실습해보면서 DB를 왜 쓰는지, DB 개념에 대해 알게 되었다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 스파르타코딩클럽 웹개발 종합반 2주차]]></title>
    <link>https://dgd03146-github-io.vercel.app//220516-wil</link>
    <pubDate>2022-05-16</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220516-wil</guid>
    <description>
    <![CDATA[jQuery로 간단한 HTML을 조작, 서버 클라이언트 통신]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="목표" class="heading">목표</h2>
<ol>
<li>Javascript 문법에 익숙해진다.</li>
<li>jQuery로 간단한 HTML을 조작할 수 있다.</li>
<li>Ajax로 서버 API(약속)에 데이터를 주고, 결과를 받아온다.</li>
</ol>
<br/>
<h2 id="jquery" class="heading"><strong>JQuery</strong></h2>
<h3 id="jquery-란">jQuery 란?</h3>
<p>HTML의 요소들을 조작하는, 편리한 Javascript를 미리 작성해둔 것. 라이브러리!</p>
<aside>
👉 Javascript로도 모든 기능(예 - 버튼 글씨 바꾸기 등)을 구현할 수는 있지만, 
1) 코드가 복잡하고, 2) 브라우저 간 호환성 문제도 고려해야해서, **j**Query라는 라이브러리가 등장하게 되었다.
</aside>
<h3 id="jquery와-javascript---코드-비교해보기">jQuery와 Javascript - 코드 비교해보기</h3>
<aside>
👉 jQuery는 Javascript와 다른 특별한 소프트웨어가 아니라 미리 작성된 Javascript 코드이다. (그렇기 때문에, 쓰기 전에 "임포트"를 해야한다!)
</aside>
<p>Javascript로 길고 복잡하게 써야 하는 것을</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">style</span><span class="token punctuation">.</span><span class="token property-access">display</span> <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
</span></code></pre>
<p>jQuery로 보다 직관적으로 쓸 수 있어서 편리하다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#element'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<h3 id="jquery를-사용하는-방법">jQuery를 사용하는 방법</h3>
<aside>
👉 css와 마찬가지로, jQuery를 쓸 때에도 "가리켜야" → 조작할 수 있다.
css에서는 선택자로 class를 썼지만 jQuery에서는 id 값을 통해 특정 버튼/인풋박스/div/.. 등을 가리키게 된다.
</aside>
<br/>
<h2 id="서버-클라이언트-통신-이해하기" class="heading"><strong>서버-클라이언트 통신 이해하기</strong></h2>
<h3 id="서버클라이언트-json을-이해하기">서버→클라이언트: "JSON"을 이해하기</h3>
<p>JSON은, Key:Value로 이루어져 있다. 자료형 Dictionary와 아주 유사하다.</p>
<aside>
👉 위 예제에서는 RealtimeCityAir라는 키 값에 딕셔너리 형 value가 들어가있고, 그 안에 row라는 키 값에는 리스트형 value가 들어가있다.
</aside>
<h3 id="클라이언트서버-get-요청-이해하기">클라이언트→서버: GET 요청 이해하기</h3>
<aside>
👉 API는 은행 창구와 같다!  
같은 예금 창구에서도 개인 고객이냐 기업 고객이냐에 따라 가져와야 하는 것 / 처리해주는 것이 다른 것처럼, 클라이언트가 요청 할 때에도, "타입"이라는 것이 존재한다.  
- GET → 통상적으로! 데이터 조회(Read)를 요청할 때  
  예) 영화 목록 조회
<ul>
<li>POST → 통상적으로! 데이터 생성(Create), 변경(Update), 삭제(Delete) 요청 할 때<br>
예) 회원가입, 회원탈퇴, 비밀번호 수정</li>
</ul>
</aside>
<aside>
👉 **GET 방식으로 데이터를 전달하는 방법**
<p>? : 여기서부터 전달할 데이터가 작성된다는 의미이다.<br>
&#x26; : 전달할 데이터가 더 있다는 뜻이다.</p>
<p>예시) google.com/search?q=아이폰&#x26;sourceid=chrome&#x26;ie=UTF-8</p>
<pre><code class="code-highlight"><span class="code-line">     위 주소는 google.com의 search 창구에 다음 정보를 전달한다!
</span><span class="code-line">     q=아이폰                        (검색어)
</span><span class="code-line">     sourceid=chrome        (브라우저 정보)
</span><span class="code-line">     ie=UTF-8                      (인코딩 정보)
</span></code></pre>
</aside>
<br/>
<h2 id="review" class="heading">Review</h2>
<p>자바스크립트만 쓰다가 jQuery를 사용하니 훨씬 쉽게 코드를 짤 수 있었다. 클라이언트와 서버간의 GET, POST 개념에 대해 공부하였고 GET 방식으로 데이터를 전달하는 방법을 실습해보았다. API를 받아오고 전달하는것은 앞으로 자주 쓰이기때문에 개념을 확실히 알고 있으면 좋을것 같다. 다음엔 POST 방식으로 학습을 하게 되는데 기대가 된다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WIL] 스파르타코딩클럽 웹개발 종합반 1주차]]></title>
    <link>https://dgd03146-github-io.vercel.app//220509-wil</link>
    <pubDate>2022-05-09</pubDate>
    <guid isPermaLink="false">https://dgd03146-github-io.vercel.app//220509-wil</guid>
    <description>
    <![CDATA[HTML, CSS 기본 내용, JavaScript 기초 문법]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="목표" class="heading">목표</h2>
<ol>
<li>서버와 클라이언트의 역할에 대해 이해한다.</li>
<li>HTML, CSS의 기초 지식을 이해한다. 부트스트랩을 가져다 쓸 줄 안다!</li>
<li>Javascript 기초 문법을 익힌다.</li>
</ol>
<br/>
<h2 id="서버클라이언트웹의-동작-개념" class="heading">서버/클라이언트/웹의 동작 개념</h2>
<h3 id="웹의-동작-개념-html을-받는-경우">웹의 동작 개념 (HTML을 받는 경우)</h3>
<aside>
👉 우리가 보는 웹페이지는 모두 서버에서 미리 준비해두었던 것을 "받아서",
"그려주는" 것입니다. 즉, 브라우저가 하는 일은 1) 요청을 보내고, 2) 받은 HTML 파일을 그려주는 일 뿐이다.
</aside>
<aside>
👉 서버가 만들어 놓은 "API"라는 창구에 미리 정해진 약속대로 요청을 보내는 것이다.
<p>예) <a href="https://naver.com/" target="_blank" rel="noopener noreferer">https://naver.com/</a>
→ 이것은 "naver.com"이라는 이름의 서버에 있는, "/" 창구에 요청을 보낸 것!</p>
</aside>
<p><img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff4770f1b-1509-4e69-b971-1cd5ceb258a6%2FUntitled.png?table=block&#x26;id=0115b3e0-4e16-4808-8f0e-5d34e14d06d9&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=2000&#x26;userId=&#x26;cache=v2" alt=""></p>
<h3 id="웹의-동작-개념-데이터만-받는-경우">웹의 동작 개념 (데이터만 받는 경우)</h3>
<p><img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe495bccc-7a19-40e6-8669-0e59d5506bfd%2FUntitled.png?table=block&#x26;id=80b5ea39-6f75-4bce-a0a7-2b34c6774102&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=1970&#x26;userId=&#x26;cache=v2" alt=""></p>
<aside>
👉 데이터만 내려올 경우는, 이렇게 생겼는데 이런 생김새를 JSON 형식이라고 한다.
</aside>
<p><img src="https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F00ffef83-0d54-463d-b164-70f9b60f4b62%2FUntitled.png?table=block&#x26;id=18be6f59-af0f-47ff-b3b1-30db387f6432&#x26;spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&#x26;width=2000&#x26;userId=&#x26;cache=v2" alt=""></p>
<br/>
<h2 id="html-css-기본-내용" class="heading"><strong>HTML, CSS 기본 내용</strong></h2>
<h3 id="html과-css의-개념">HTML과 CSS의 개념</h3>
<aside>
👉 HTML은 뼈대, CSS는 꾸미기!
</aside>
<ul>
<li>HTML은 구역과 텍스트를 나타내는 코드로, CSS는 잡은 구역을 꾸며주는 것으로 생각합니다. HTML 내 style 속성으로 꾸미기를 할 수 있지만, 긴 세월동안 이것을 한데 모아 볼 수 있는 CSS 파일이 탄생하게 되었습니다. HTML 코드 내에 CSS 파일을 불러와서 적용힌다.</li>
<li>또한 CSS를 잘 사용할 줄 아는 것과, '예쁘게' 만드는 것은 다른 영역이기 때문에(붓을 잡을 줄 아는 것과 그림을 잘 그릴 줄 아는 것의 차이), 많은 경우 웹디자이너나 퍼블리셔에게 의존하게 된다.</li>
</ul>
<h3 id="html-기초">HTML 기초</h3>
<aside>
👉 HTML은 크게 head와 body로 구성된다.
</aside>
<ul>
<li>head안에는 페이지의 속성 정보를, body안에는 페이지의 내용을 담는다.</li>
<li>head 안에 들어가는 대표적인 요소들: meta, script, link, title 등</li>
</ul>
<aside>
👉 페이지의 속성을 정의하거나, 필요한 스크립트들을 부릅니다. 즉, 눈에 안 보이는 필요한 것들을 담는 것.
</aside>
<h3 id="css-기초"><strong>CSS 기초</strong></h3>
<ul>
<li>
<p>CSS는 어떻게 사용하나요?</p>
  <aside>
  👉 <head> ~ </head> 안에 <style> ~ </style> 로 공간을 만들어 작성합니다.
<p>mytitle라는 클래스를 가리킬 때, .mytitle { ... } 라고 써줘야 하는 것을 꼭! 기억!</p>
  </aside>
</li>
</ul>
<br/>
<h2 id="javascript" class="heading"><strong>Javascript</strong></h2>
<h3 id="자바스크립트란">자바스크립트란?</h3>
<ul>
<li>
<p>프로그래밍 언어 중 하나로, 브라우저가 알아들을 수 있는 언어이다.</p>
  <aside>
  👉 이론 설명 때, 클라이언트가 서버에 요청하면, 서버가 클라이언트에게 HTML+CSS+Javascript를 준다.
  </aside>
  <aside>
  👉 [잠깐 상식!]  
<p>Q. 왜 브라우저는 Javascript만 알아들을까? HTML안에다 파이썬, Java 같은 언어를 써서 주면 안될까?</p>
<p>A. 불가능한 이야기는 아니다. 다만, 이 "역사적인 이유 &#x26; 이미 만들어진 표준"이기 때문에, 모든 브라우저는 기본적으로 Javascript를 알아듣게 설계되어있고, 모든 웹서버는 HTML+CSS+Javascript를 주게 된다.</p>
  </aside>
</li>
</ul>
<h3 id="javascript-기초-문법">Javascript 기초 문법</h3>
<details>
<summary>변수 & 기본연산</summary>
<div markdown="1">
<ul>
<li>
<p>변수 대입( a = 2 )의 의미: "오른쪽에 있는 것을 왼쪽에 넣는 것!"
(2를 a라는 변수에 넣는다)</p>
<ul>
<li>
<p>let으로 변수를 선언합니다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</span><span class="code-line">num <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 변수는 값을 저장하는 박스예요.</span>
</span><span class="code-line"><span class="token comment">// 한 번 선언했으면, 다시 선언하지 않고 값을 넣습니다.</span>
</span></code></pre>
</li>
<li>
<p>사칙연산, 그리고 문자열 더하기가 기본적으로 가능하다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 3</span>
</span><span class="code-line">a <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">// 0.5</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token string">'Lee'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">first <span class="token operator">+</span> last<span class="token punctuation">;</span> <span class="token comment">// 'BobLee'</span>
</span><span class="code-line">
</span><span class="code-line">first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last<span class="token punctuation">;</span> <span class="token comment">// 'Bob Lee'</span>
</span><span class="code-line">
</span><span class="code-line">first <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment">// Bob1 -> 문자+숫자를 하면, 숫자를 문자로 바꾼 뒤 수행한다.</span>
</span></code></pre>
</li>
<li>
<p>변수명은 아무렇게나?</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> first_name <span class="token operator">=</span> <span class="token string">'bob'</span> <span class="token comment">// snake case라고 합니다.</span>
</span><span class="code-line">
</span><span class="code-line">또는<span class="token punctuation">,</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">'bob'</span> <span class="token comment">// camel case라고 합니다. 회사마다 규칙이 있다.</span>
</span><span class="code-line">
</span><span class="code-line">과 같이<span class="token punctuation">,</span> 쉽게 알아볼 수 있게 쓰는 게 중요하다<span class="token punctuation">.</span>
</span><span class="code-line"><span class="token property-access">다른</span> 특수문자 또는 띄워쓰기는 불가능하다<span class="token operator">!</span>
</span></code></pre>
</li>
</ul>
</li>
</ul>
</div>
</details>
<details>
<summary>리스트 & 딕셔너리</summary>
<div markdown="1">
<ul>
<li>
<p>리스트: 순서를 지켜서 가지고 있는 형태입니다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 리스트를 선언. 변수 이름은 역시 아무렇게나 가능!</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 또는,</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> b_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hey'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 로 선언 가능</span>
</span><span class="code-line">
</span><span class="code-line">b_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2 를 출력</span>
</span><span class="code-line">b_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'hey'를 출력</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 리스트에 요소 넣기</span>
</span><span class="code-line">b_list<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">'헤이'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">b_list<span class="token punctuation">;</span> <span class="token comment">// [1, 2, "hey", 3, "헤이"] 를 출력</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 리스트의 길이 구하기</span>
</span><span class="code-line">b_list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token comment">// 5를 출력</span>
</span></code></pre>
</li>
<li>
<p>딕셔너리: 키(key)-밸류(value) 값의 묶음</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> a_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 딕셔너리 선언. 변수 이름은 역시 아무렇게나 가능!</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 또는,</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> b_dict <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 로 선언 가능</span>
</span><span class="code-line">b_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'Bob'을 출력</span>
</span><span class="code-line">b_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 21을 출력</span>
</span><span class="code-line">
</span><span class="code-line">b_dict<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span> <span class="token comment">// 딕셔너리에 키:밸류 넣기</span>
</span><span class="code-line">b_dict<span class="token punctuation">;</span> <span class="token comment">// {name: "Bob", age: 21, height: 180}을 출력</span>
</span></code></pre>
</li>
<li>
<p>리스트와 딕셔너리의 조합</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line">names <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'carry'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// names[0]['name']의 값은? 'bob'</span>
</span><span class="code-line"><span class="token comment">// names[1]['name']의 값은? 'carry'</span>
</span><span class="code-line">
</span><span class="code-line">new_name <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">names<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// names의 값은? [{'name':'bob','age':20},{'name':'carry','age':38},{'name':'john','age':7}]</span>
</span><span class="code-line"><span class="token comment">// names[2]['name']의 값은? 'john'</span>
</span></code></pre>
</li>
<li>
<p>왜 필요할까요?</p>
  <aside>
  💡 순서를 표시할 수 있고, 정보를 묶을 수 있다.  
  </aside>  
<p>앞에서 언급한 &#x3C;스파르타과일가게>가 정말 잘 되어서 전국에서 손님이 찾아오고 있다. 대기표를 작성하기 위해서 온 순서대로 이름,  휴대폰 번호를 적도록 하였는데 변수만을 사용한 모습은 다음과 같다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> customer_1_name <span class="token operator">=</span> <span class="token string">'김스파'</span><span class="token punctuation">;</span>  
</span><span class="code-line"><span class="token keyword">let</span> customer_1_phone <span class="token operator">=</span> <span class="token string">'010-1234-1234'</span><span class="token punctuation">;</span>  
</span><span class="code-line"><span class="token keyword">let</span> customer_2_name <span class="token operator">=</span> <span class="token string">'박르탄'</span><span class="token punctuation">;</span>  
</span><span class="code-line"><span class="token keyword">let</span> customer_2_phone <span class="token operator">=</span> <span class="token string">'010-4321-4321'</span><span class="token punctuation">;</span>  
</span><span class="code-line"><span class="token comment">//...(알아보기 힘들다.)</span>
</span></code></pre>
<p>👉딕셔너리를 활용한다면 다음과 같이 고객 별로 정보를 묶을 수 있다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> customer_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">'name'</span><span class="token operator">:</span> <span class="token string">'김스파'</span><span class="token punctuation">,</span> <span class="token string-property property">'phone'</span><span class="token operator">:</span> <span class="token string">'010-1234-1234'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
</span><span class="code-line"><span class="token keyword">let</span> customer_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">'name'</span><span class="token operator">:</span> <span class="token string">'박르탄'</span><span class="token punctuation">,</span> <span class="token string-property property">'phone'</span><span class="token operator">:</span> <span class="token string">'010-4321-4321'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>👉그리고 순서를 나타내기 위해 리스트를 사용하면, 이렇게나 깔끔해진다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> customer <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token punctuation">{</span><span class="token string-property property">'name'</span><span class="token operator">:</span> <span class="token string">'김스파'</span><span class="token punctuation">,</span> <span class="token string-property property">'phone'</span><span class="token operator">:</span> <span class="token string">'010-1234-1234'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">{</span><span class="token string-property property">'name'</span><span class="token operator">:</span> <span class="token string">'박르탄'</span><span class="token punctuation">,</span> <span class="token string-property property">'phone'</span><span class="token operator">:</span> <span class="token string">'010-4321-4321'</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">]</span>
</span></code></pre>
<p>✅보기에도 깔끔해지고, 다루기도 쉬워지고, 고객이 새로 한 명 더 오더라도 .push 함수를 이용해 간단하게 대응할 수 있다.</p>
</li>
</ul>
</div>
</details>
<details>
<summary>기본 함수들</summary>
<div markdown="1">
<ul>
<li>
<p>사칙연산 외에도, 기본적으로 제공하는 여러 함수들이 존재합니다.</p>
<ul>
<li>
<p>예를 들면, '나눗셈의나머지'를 구하고 싶은 경우</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span>
</span><span class="code-line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">7</span>
</span><span class="code-line">    a <span class="token operator">%</span> b <span class="token operator">=</span> <span class="token number">6</span>
</span></code></pre>
</li>
<li>
<p>또, 특정 문자로 문자열을 나누고 싶은 경우</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> myemail <span class="token operator">=</span> <span class="token string">'sparta@gmail.com'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> result <span class="token operator">=</span> myemail<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['sparta','gmail.com']</span>
</span><span class="code-line">
</span><span class="code-line">result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// sparta</span>
</span><span class="code-line">result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// gmail.com</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">let</span> result2 <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['gmail','com']</span>
</span><span class="code-line">
</span><span class="code-line">result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// gmail -> 우리가 알고 싶었던 것!</span>
</span><span class="code-line">result2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// com</span>
</span><span class="code-line">
</span><span class="code-line">myemail<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// gmail -> 간단하게 쓸 수도 있다!</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>함수</p>
<ul>
<li>
<p>기본 생김새</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// 만들기</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">함수이름</span><span class="token punctuation">(</span><span class="token parameter">필요한 변수들</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">	내릴 명령들을 순차적으로 작성
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token comment">// 사용하기</span>
</span><span class="code-line"><span class="token function">함수이름</span><span class="token punctuation">(</span>필요한 변수들<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
<li>
<p>예시</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// 두 숫자를 입력받으면 더한 결과를 돌려주는 함수</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'숫자'</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</span><span class="code-line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</span></code></pre>
</li>
</ul>
</li>
<li>
<p>조건문</p>
<ul>
<li>
<p>20 보다 작으면 작다고, 크면 크다고 알려주는 함수</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">is_adult</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'성인이에요'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'청소년이에요'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">is_adult</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
<li>
<p>if, else if, else if, else if else</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">is_adult</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'성인이에요'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'청소년이에요'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'10살 이하!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">is_adult</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
</ul>
</li>
</ul>
</div>
</details>
<details>
<summary>반복문</summary>
<div markdown="1">
<ul>
<li>
<p>예를 들어 0부터 99까지 출력해야 하는 상황이라면!</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 이렇게 쓰기엔 무리가 있겠죠? 그래서, 반복문이라는 것이 존재합니다!</span>
</span></code></pre>
<ul>
<li>
<p>반복문을 이용하면 아래와 같이 단 세줄로, 출력할 수 있습니다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token number">1.</span> 시작조건<span class="token punctuation">;</span> <span class="token number">2.</span> 반복조건<span class="token punctuation">;</span> <span class="token number">3.</span> 더하기<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">	<span class="token number">4.</span> 매번실행
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>체크하고 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>괜찮으면<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>
</span><span class="code-line"><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>체크하고 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>괜찮으면<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>
</span><span class="code-line"><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>체크하고 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>괜찮으면<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>
</span><span class="code-line"><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>체크하고 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>괜찮으면<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>
</span><span class="code-line">
</span><span class="code-line">와 같은 순서로 실행됩니다<span class="token punctuation">.</span>
</span><span class="code-line"><span class="token property-access">i가</span> 증가하다가 반복조건에 맞지 않으면<span class="token punctuation">,</span> 반복을 종료하고 빠져나옵니다<span class="token punctuation">.</span>
</span></code></pre>
</li>
<li>
<p>그러나 위처럼 숫자를 출력하는 경우보다는, 반복문은 주로 리스트와 함께 쓰입니다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'철수'</span><span class="token punctuation">,</span> <span class="token string">'영희'</span><span class="token punctuation">,</span> <span class="token string">'민수'</span><span class="token punctuation">,</span> <span class="token string">'형준'</span><span class="token punctuation">,</span> <span class="token string">'기남'</span><span class="token punctuation">,</span> <span class="token string">'동희'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 이렇게 하면 리스트의 모든 원소를 한번에 출력할 수 있겠죠?</span>
</span><span class="code-line"><span class="token comment">// i가 1씩 증가하면서, people의 원소를 차례대로 불러올 수 있게 됩니다.</span>
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> people<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
</li>
<li>
<p>리스트도 그냥 리스트가 아닙니다! 딕셔너리가 들어간 리스트와 찰떡이다</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'철수'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'영희'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">85</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'민수'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'형준'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'기남'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">68</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'동희'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> scores<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 이렇게 하면 리스트 내의 딕셔너리를 하나씩 출력할 수 있고,</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> scores<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 이렇게 하면 점수가 70점 미만인 사람들의 이름만 출력할 수도 있습니다.</span>
</span></code></pre>
</li>
</ul>
</li>
</ul>
</div>
</details>
<br>
<h2 id="review" class="heading">Review</h2>
<p>프론트엔드를 공부하면서 전반적으로 아는 내용이라 빠르게 복습하는 식으로 하고 넘겼다. 부트스트랩을 처음 써보았는데 확실히 디자인이 더 깔끔하고 사용하기가 편한 것 같다.</p>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>